# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr ""

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr ""

#: ../../c-api/iter.rst:12
msgid "Return true if the object *o* supports the iterator protocol."
msgstr ""

#: ../../c-api/iter.rst:17
msgid ""
"Return the next value from the iteration *o*.  The object must be an "
"iterator (it is up to the caller to check this).  If there are no "
"remaining values, returns *NULL* with no exception set.  If an error "
"occurs while retrieving the item, returns *NULL* and passes along the "
"exception."
msgstr ""

#: ../../c-api/iter.rst:22
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""

#: ../../c-api/iter.rst:25
msgid ""
"PyObject *iterator = PyObject_GetIter(obj);\n"
"PyObject *item;\n"
"\n"
"if (iterator == NULL) {\n"
"    /* propagate error */\n"
"}\n"
"\n"
"while (item = PyIter_Next(iterator)) {\n"
"    /* do something with item */\n"
"    ...\n"
"    /* release reference when done */\n"
"    Py_DECREF(item);\n"
"}\n"
"\n"
"Py_DECREF(iterator);\n"
"\n"
"if (PyErr_Occurred()) {\n"
"    /* propagate error */\n"
"}\n"
"else {\n"
"    /* continue doing useful work */\n"
"}"
msgstr ""

