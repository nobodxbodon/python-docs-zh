# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../tutorial/datastructures.rst:5
msgid "Data Structures"
msgstr ""

#: ../../tutorial/datastructures.rst:7
msgid ""
"This chapter describes some things you've learned about already in more "
"detail, and adds some new things as well."
msgstr ""

#: ../../tutorial/datastructures.rst:13
msgid "More on Lists"
msgstr ""

#: ../../tutorial/datastructures.rst:15
msgid ""
"The list data type has some more methods.  Here are all of the methods of"
" list objects:"
msgstr ""

#: ../../tutorial/datastructures.rst:22
msgid "Add an item to the end of the list.  Equivalent to ``a[len(a):] = [x]``."
msgstr ""

#: ../../tutorial/datastructures.rst:28
msgid ""
"Extend the list by appending all the items from the iterable.  Equivalent"
" to ``a[len(a):] = iterable``."
msgstr ""

#: ../../tutorial/datastructures.rst:35
msgid ""
"Insert an item at a given position.  The first argument is the index of "
"the element before which to insert, so ``a.insert(0, x)`` inserts at the "
"front of the list, and ``a.insert(len(a), x)`` is equivalent to "
"``a.append(x)``."
msgstr ""

#: ../../tutorial/datastructures.rst:43
msgid ""
"Remove the first item from the list whose value is *x*.  It is an error "
"if there is no such item."
msgstr ""

#: ../../tutorial/datastructures.rst:50
msgid ""
"Remove the item at the given position in the list, and return it.  If no "
"index is specified, ``a.pop()`` removes and returns the last item in the "
"list.  (The square brackets around the *i* in the method signature denote"
" that the parameter is optional, not that you should type square brackets"
" at that position.  You will see this notation frequently in the Python "
"Library Reference.)"
msgstr ""

#: ../../tutorial/datastructures.rst:60
msgid "Remove all items from the list.  Equivalent to ``del a[:]``."
msgstr ""

#: ../../tutorial/datastructures.rst:66
msgid ""
"Return zero-based index in the list of the first item whose value is *x*."
" Raises a :exc:`ValueError` if there is no such item."
msgstr ""

#: ../../tutorial/datastructures.rst:69
msgid ""
"The optional arguments *start* and *end* are interpreted as in the slice "
"notation and are used to limit the search to a particular subsequence of "
"the list.  The returned index is computed relative to the beginning of "
"the full sequence rather than the *start* argument."
msgstr ""

#: ../../tutorial/datastructures.rst:78
msgid "Return the number of times *x* appears in the list."
msgstr ""

#: ../../tutorial/datastructures.rst:84
msgid ""
"Sort the items of the list in place (the arguments can be used for sort "
"customization, see :func:`sorted` for their explanation)."
msgstr ""

#: ../../tutorial/datastructures.rst:91
msgid "Reverse the elements of the list in place."
msgstr ""

#: ../../tutorial/datastructures.rst:97
msgid "Return a shallow copy of the list.  Equivalent to ``a[:]``."
msgstr ""

#: ../../tutorial/datastructures.rst:100
msgid "An example that uses most of the list methods::"
msgstr ""

#: ../../tutorial/datastructures.rst:102
msgid ""
">>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', "
"'banana']\n"
">>> fruits.count('apple')\n"
"2\n"
">>> fruits.count('tangerine')\n"
"0\n"
">>> fruits.index('banana')\n"
"3\n"
">>> fruits.index('banana', 4)  # Find next banana starting a position 4\n"
"6\n"
">>> fruits.reverse()\n"
">>> fruits\n"
"['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\n"
">>> fruits.append('grape')\n"
">>> fruits\n"
"['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']"
"\n"
">>> fruits.sort()\n"
">>> fruits\n"
"['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']"
"\n"
">>> fruits.pop()\n"
"'pear'"
msgstr ""
">>> 水果 = ['橙', '苹果', '梨', '香蕉', '猕猴桃', '苹果', '香蕉']\n"
">>> 水果.count('苹果')\n"
"2\n"
">>> 水果.count('柑橘')\n"
"0\n"
">>> 水果.index('香蕉')\n"
"3\n"
">>> 水果.index('香蕉', 4)  # 从位置4开始搜索下一个香蕉\n"
"6\n"
">>> 水果.reverse()\n"
">>> 水果\n"
"['香蕉', '苹果', '猕猴桃', '香蕉', '梨', '苹果', '橙']\n"
">>> 水果.append('葡萄')\n"
">>> 水果\n"
"['香蕉', '苹果', '猕猴桃', '香蕉', '梨', '苹果', '橙', '葡萄']"
"\n"
">>> 水果.sort()  # 按照编码排序, 详见5.8\n"
">>> 水果\n"
"['梨', '橙', '猕猴桃', '苹果', '苹果', '葡萄', '香蕉', '香蕉']"
"\n"
">>> 水果.pop()\n"
"'梨'"

#: ../../tutorial/datastructures.rst:123
msgid ""
"You might have noticed that methods like ``insert``, ``remove`` or "
"``sort`` that only modify the list have no return value printed -- they "
"return the default ``None``. [1]_  This is a design principle for all "
"mutable data structures in Python."
msgstr ""

#: ../../tutorial/datastructures.rst:132
msgid "Using Lists as Stacks"
msgstr ""

#: ../../tutorial/datastructures.rst:137
msgid ""
"The list methods make it very easy to use a list as a stack, where the "
"last element added is the first element retrieved (\"last-in, first-"
"out\").  To add an item to the top of the stack, use :meth:`append`.  To "
"retrieve an item from the top of the stack, use :meth:`pop` without an "
"explicit index.  For example::"
msgstr ""

#: ../../tutorial/datastructures.rst:142
msgid ""
">>> stack = [3, 4, 5]\n"
">>> stack.append(6)\n"
">>> stack.append(7)\n"
">>> stack\n"
"[3, 4, 5, 6, 7]\n"
">>> stack.pop()\n"
"7\n"
">>> stack\n"
"[3, 4, 5, 6]\n"
">>> stack.pop()\n"
"6\n"
">>> stack.pop()\n"
"5\n"
">>> stack\n"
"[3, 4]"
msgstr ""
">>> 栈 = [3, 4, 5]\n"
">>> 栈.append(6)\n"
">>> 栈.append(7)\n"
">>> 栈\n"
"[3, 4, 5, 6, 7]\n"
">>> 栈.pop()\n"
"7\n"
">>> 栈\n"
"[3, 4, 5, 6]\n"
">>> 栈.pop()\n"
"6\n"
">>> 栈.pop()\n"
"5\n"
">>> 栈\n"
"[3, 4]"

#: ../../tutorial/datastructures.rst:162
msgid "Using Lists as Queues"
msgstr ""

#: ../../tutorial/datastructures.rst:166
msgid ""
"It is also possible to use a list as a queue, where the first element "
"added is the first element retrieved (\"first-in, first-out\"); however, "
"lists are not efficient for this purpose.  While appends and pops from "
"the end of list are fast, doing inserts or pops from the beginning of a "
"list is slow (because all of the other elements have to be shifted by "
"one)."
msgstr ""

#: ../../tutorial/datastructures.rst:172
msgid ""
"To implement a queue, use :class:`collections.deque` which was designed "
"to have fast appends and pops from both ends.  For example::"
msgstr ""

#: ../../tutorial/datastructures.rst:175
msgid ""
">>> from collections import deque\n"
">>> queue = deque([\"Eric\", \"John\", \"Michael\"])\n"
">>> queue.append(\"Terry\")           # Terry arrives\n"
">>> queue.append(\"Graham\")          # Graham arrives\n"
">>> queue.popleft()                 # The first to arrive now leaves\n"
"'Eric'\n"
">>> queue.popleft()                 # The second to arrive now leaves\n"
"'John'\n"
">>> queue                           # Remaining queue in order of arrival"
"\n"
"deque(['Michael', 'Terry', 'Graham'])"
msgstr ""
">>> from collections import deque\n"
">>> 队列 = deque([\"张三\", \"李四\", \"王五\"])\n"
">>> 队列.append(\"小红\")           # 小红来了\n"
">>> 队列.append(\"小吴\")          # 小吴来了\n"
">>> 队列.popleft()                 # 最先到的离开了\n"
"'张三'\n"
">>> 队列.popleft()                 # 第二个到的离开了\n"
"'李四'\n"
">>> 队列                           # 按照到达顺序的剩余队列"
"\n"
"deque(['王五', '小红', '小吴'])"

#: ../../tutorial/datastructures.rst:190
msgid "List Comprehensions"
msgstr ""

#: ../../tutorial/datastructures.rst:192
msgid ""
"List comprehensions provide a concise way to create lists. Common "
"applications are to make new lists where each element is the result of "
"some operations applied to each member of another sequence or iterable, "
"or to create a subsequence of those elements that satisfy a certain "
"condition."
msgstr ""

#: ../../tutorial/datastructures.rst:197
msgid "For example, assume we want to create a list of squares, like::"
msgstr ""

#: ../../tutorial/datastructures.rst:199
msgid ""
">>> squares = []\n"
">>> for x in range(10):\n"
"...     squares.append(x**2)\n"
"...\n"
">>> squares\n"
"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
msgstr ""
">>> 平方数 = []\n"
">>> for 数 in range(10):\n"
"...     平方数.append(数**2)\n"
"...\n"
">>> 平方数\n"
"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"

#: ../../tutorial/datastructures.rst:206
msgid ""
"Note that this creates (or overwrites) a variable named ``x`` that still "
"exists after the loop completes.  We can calculate the list of squares "
"without any side effects using::"
msgstr ""

#: ../../tutorial/datastructures.rst:210
msgid "squares = list(map(lambda x: x**2, range(10)))"
msgstr "平方数 = list(map(lambda 数: 数**2, range(10)))"

#: ../../tutorial/datastructures.rst:212
msgid "or, equivalently::"
msgstr ""

#: ../../tutorial/datastructures.rst:214
msgid "squares = [x**2 for x in range(10)]"
msgstr "平方数 = [数**2 for 数 in range(10)]"

#: ../../tutorial/datastructures.rst:216
msgid "which is more concise and readable."
msgstr ""

#: ../../tutorial/datastructures.rst:218
msgid ""
"A list comprehension consists of brackets containing an expression "
"followed by a :keyword:`for` clause, then zero or more :keyword:`for` or "
":keyword:`if` clauses.  The result will be a new list resulting from "
"evaluating the expression in the context of the :keyword:`for` and "
":keyword:`if` clauses which follow it. For example, this listcomp "
"combines the elements of two lists if they are not equal::"
msgstr ""

#: ../../tutorial/datastructures.rst:225
msgid ""
">>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n"
"[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]"
msgstr ""
">>> [(甲, 乙) for 甲 in [1,2,3] for 乙 in [3,1,4] if 甲 != 乙]\n"
"[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]"

#: ../../tutorial/datastructures.rst:228
msgid "and it's equivalent to::"
msgstr ""

#: ../../tutorial/datastructures.rst:230
# combs - combinations. lol
msgid ""
">>> combs = []\n"
">>> for x in [1,2,3]:\n"
"...     for y in [3,1,4]:\n"
"...         if x != y:\n"
"...             combs.append((x, y))\n"
"...\n"
">>> combs\n"
"[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]"
msgstr ""
">>> 组合 = []\n"
">>> for 甲 in [1,2,3]:\n"
"...     for 乙 in [3,1,4]:\n"
"...         if 甲 != 乙:\n"
"...             组合.append((甲, 乙))\n"
"...\n"
">>> 组合\n"
"[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]"

#: ../../tutorial/datastructures.rst:239
msgid ""
"Note how the order of the :keyword:`for` and :keyword:`if` statements is "
"the same in both these snippets."
msgstr ""

#: ../../tutorial/datastructures.rst:242
msgid ""
"If the expression is a tuple (e.g. the ``(x, y)`` in the previous "
"example), it must be parenthesized. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:245
# 关于武器和新鲜水果的来历: http://www.montypython.net/scripts/fruit.php
# TODO: listcomp
msgid ""
">>> vec = [-4, -2, 0, 2, 4]\n"
">>> # create a new list with the values doubled\n"
">>> [x*2 for x in vec]\n"
"[-8, -4, 0, 4, 8]\n"
">>> # filter the list to exclude negative numbers\n"
">>> [x for x in vec if x >= 0]\n"
"[0, 2, 4]\n"
">>> # apply a function to all the elements\n"
">>> [abs(x) for x in vec]\n"
"[4, 2, 0, 2, 4]\n"
">>> # call a method on each element\n"
">>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']\n"
">>> [weapon.strip() for weapon in freshfruit]\n"
"['banana', 'loganberry', 'passion fruit']\n"
">>> # create a list of 2-tuples like (number, square)\n"
">>> [(x, x**2) for x in range(6)]\n"
"[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n"
">>> # the tuple must be parenthesized, otherwise an error is raised\n"
">>> [x, x**2 for x in range(6)]\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    [x, x**2 for x in range(6)]\n"
"               ^\n"
"SyntaxError: invalid syntax\n"
">>> # flatten a list using a listcomp with two 'for'\n"
">>> vec = [[1,2,3], [4,5,6], [7,8,9]]\n"
">>> [num for elem in vec for num in elem]\n"
"[1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""
">>> 数组 = [-4, -2, 0, 2, 4]\n"
">>> # 按每个值翻倍创建新列表\n"
">>> [数*2 for 数 in 数组]\n"
"[-8, -4, 0, 4, 8]\n"
">>> # 过滤列表, 除去负数\n"
">>> [数 for 数 in 数组 if 数 >= 0]\n"
"[0, 2, 4]\n"
">>> # 对所有元素应用一个函数\n"
">>> [abs(数) for 数 in 数组]\n"
"[4, 2, 0, 2, 4]\n"
">>> # 对每个元素调用一个方法\n"
">>> 新鲜水果 = ['  香蕉', '  罗甘莓 ', '百香果  ']\n"
">>> [武器.strip() for 武器 in 新鲜水果]\n"
"['香蕉', '罗甘莓', '百香果']\n"
">>> # 创建(数, 平方数)的二元组列表\n"
">>> [(数, 数**2) for 数 in range(6)]\n"
"[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n"
">>> # 元组必须在括号内, 否则报错\n"
">>> [数, 数**2 for 数 in range(6)]\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    [数, 数**2 for 数 in range(6)]\n"
"               ^\n"
"SyntaxError: invalid syntax\n"
">>> # 用两个'for'的listcomp展开列表\n"
">>> 数组 = [[1,2,3], [4,5,6], [7,8,9]]\n"
">>> [数 for 元素 in 数组 for 数 in 元素]\n"
"[1, 2, 3, 4, 5, 6, 7, 8, 9]"

#: ../../tutorial/datastructures.rst:273
msgid "List comprehensions can contain complex expressions and nested functions::"
msgstr ""

#: ../../tutorial/datastructures.rst:275
msgid ""
">>> from math import pi\n"
">>> [str(round(pi, i)) for i in range(1, 6)]\n"
"['3.1', '3.14', '3.142', '3.1416', '3.14159']"
msgstr ""
">>> from math import pi\n"
">>> [str(round(pi, 小数位)) for 小数位 in range(1, 6)]\n"
"['3.1', '3.14', '3.142', '3.1416', '3.14159']"

#: ../../tutorial/datastructures.rst:280
msgid "Nested List Comprehensions"
msgstr ""

#: ../../tutorial/datastructures.rst:282
msgid ""
"The initial expression in a list comprehension can be any arbitrary "
"expression, including another list comprehension."
msgstr ""

#: ../../tutorial/datastructures.rst:285
msgid ""
"Consider the following example of a 3x4 matrix implemented as a list of 3"
" lists of length 4::"
msgstr ""

#: ../../tutorial/datastructures.rst:288
msgid ""
">>> matrix = [\n"
"...     [1, 2, 3, 4],\n"
"...     [5, 6, 7, 8],\n"
"...     [9, 10, 11, 12],\n"
"... ]"
msgstr ""
">>> 矩阵 = [\n"
"...     [1, 2, 3, 4],\n"
"...     [5, 6, 7, 8],\n"
"...     [9, 10, 11, 12],\n"
"... ]"

#: ../../tutorial/datastructures.rst:294
msgid "The following list comprehension will transpose rows and columns::"
msgstr ""

#: ../../tutorial/datastructures.rst:296
msgid ""
">>> [[row[i] for row in matrix] for i in range(4)]\n"
"[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"
msgstr ""
">>> [[行[列数] for 行 in 矩阵] for 列数 in range(4)]\n"
"[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"

#: ../../tutorial/datastructures.rst:299
msgid ""
"As we saw in the previous section, the nested listcomp is evaluated in "
"the context of the :keyword:`for` that follows it, so this example is "
"equivalent to::"
msgstr ""

#: ../../tutorial/datastructures.rst:303
msgid ""
">>> transposed = []\n"
">>> for i in range(4):\n"
"...     transposed.append([row[i] for row in matrix])\n"
"...\n"
">>> transposed\n"
"[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"
msgstr ""
">>> 转置矩阵 = []\n"
">>> for 列数 in range(4):\n"
"...     转置矩阵.append([行[列数] for 行 in 矩阵])\n"
"...\n"
">>> 转置矩阵\n"
"[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"

#: ../../tutorial/datastructures.rst:310
msgid "which, in turn, is the same as::"
msgstr ""

#: ../../tutorial/datastructures.rst:312
msgid ""
">>> transposed = []\n"
">>> for i in range(4):\n"
"...     # the following 3 lines implement the nested listcomp\n"
"...     transposed_row = []\n"
"...     for row in matrix:\n"
"...         transposed_row.append(row[i])\n"
"...     transposed.append(transposed_row)\n"
"...\n"
">>> transposed\n"
"[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"
msgstr ""
">>> 转置矩阵 = []\n"
">>> for 列数 in range(4):\n"
"...     # 下面三行实现嵌套的listcomp\n"
"...     转置行 = []\n"
"...     for 行 in 矩阵:\n"
"...         转置行.append(行[列数])\n"
"...     转置矩阵.append(转置行)\n"
"...\n"
">>> 转置矩阵\n"
"[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"

#: ../../tutorial/datastructures.rst:323
msgid ""
"In the real world, you should prefer built-in functions to complex flow "
"statements. The :func:`zip` function would do a great job for this use "
"case::"
msgstr ""

#: ../../tutorial/datastructures.rst:326
msgid ""
">>> list(zip(*matrix))\n"
"[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]"
msgstr ""
">>> list(zip(*矩阵))\n"
"[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]"

#: ../../tutorial/datastructures.rst:329
msgid ""
"See :ref:`tut-unpacking-arguments` for details on the asterisk in this "
"line."
msgstr ""

#: ../../tutorial/datastructures.rst:334
msgid "The :keyword:`del` statement"
msgstr ""

#: ../../tutorial/datastructures.rst:336
msgid ""
"There is a way to remove an item from a list given its index instead of "
"its value: the :keyword:`del` statement.  This differs from the "
":meth:`pop` method which returns a value.  The :keyword:`del` statement "
"can also be used to remove slices from a list or clear the entire list "
"(which we did earlier by assignment of an empty list to the slice).  For "
"example::"
msgstr ""

#: ../../tutorial/datastructures.rst:342
msgid ""
">>> a = [-1, 1, 66.25, 333, 333, 1234.5]\n"
">>> del a[0]\n"
">>> a\n"
"[1, 66.25, 333, 333, 1234.5]\n"
">>> del a[2:4]\n"
">>> a\n"
"[1, 66.25, 1234.5]\n"
">>> del a[:]\n"
">>> a\n"
"[]"
msgstr ""
">>> 组 = [-1, 1, 66.25, 333, 333, 1234.5]\n"
">>> del 组[0]\n"
">>> 组\n"
"[1, 66.25, 333, 333, 1234.5]\n"
">>> del 组[2:4]\n"
">>> 组\n"
"[1, 66.25, 1234.5]\n"
">>> del 组[:]\n"
">>> 组\n"
"[]"

#: ../../tutorial/datastructures.rst:353
msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ""

#: ../../tutorial/datastructures.rst:355
msgid ">>> del a"
msgstr ">>> del 组"

#: ../../tutorial/datastructures.rst:357
msgid ""
"Referencing the name ``a`` hereafter is an error (at least until another "
"value is assigned to it).  We'll find other uses for :keyword:`del` "
"later."
msgstr ""

#: ../../tutorial/datastructures.rst:364
msgid "Tuples and Sequences"
msgstr ""

#: ../../tutorial/datastructures.rst:366
msgid ""
"We saw that lists and strings have many common properties, such as "
"indexing and slicing operations.  They are two examples of *sequence* "
"data types (see :ref:`typesseq`).  Since Python is an evolving language, "
"other sequence data types may be added.  There is also another standard "
"sequence data type: the *tuple*."
msgstr ""

#: ../../tutorial/datastructures.rst:372
msgid "A tuple consists of a number of values separated by commas, for instance::"
msgstr ""

#: ../../tutorial/datastructures.rst:374
msgid ""
">>> t = 12345, 54321, 'hello!'\n"
">>> t[0]\n"
"12345\n"
">>> t\n"
"(12345, 54321, 'hello!')\n"
">>> # Tuples may be nested:\n"
"... u = t, (1, 2, 3, 4, 5)\n"
">>> u\n"
"((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))\n"
">>> # Tuples are immutable:\n"
"... t[0] = 88888\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: 'tuple' object does not support item assignment\n"
">>> # but they can contain mutable objects:\n"
"... v = ([1, 2, 3], [3, 2, 1])\n"
">>> v\n"
"([1, 2, 3], [3, 2, 1])"
msgstr ""
">>> 元组 = 12345, 54321, '你好!'\n"
">>> 元组[0]\n"
"12345\n"
">>> 元组\n"
"(12345, 54321, '你好!')\n"
">>> # 元组可以嵌套:\n"
"... 嵌套元组 = 元组, (1, 2, 3, 4, 5)\n"
">>> 嵌套元组\n"
"((12345, 54321, '你好!'), (1, 2, 3, 4, 5))\n"
">>> # 元组不可修改:\n"
"... 元组[0] = 88888\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: 'tuple' object does not support item assignment\n"
">>> # 但他们可以包含可修改的对象:\n"
"... 可改元组 = ([1, 2, 3], [3, 2, 1])\n"
">>> 可改元组\n"
"([1, 2, 3], [3, 2, 1])"

#: ../../tutorial/datastructures.rst:394
msgid ""
"As you see, on output tuples are always enclosed in parentheses, so that "
"nested tuples are interpreted correctly; they may be input with or "
"without surrounding parentheses, although often parentheses are necessary"
" anyway (if the tuple is part of a larger expression).  It is not "
"possible to assign to the individual items of a tuple, however it is "
"possible to create tuples which contain mutable objects, such as lists."
msgstr ""

#: ../../tutorial/datastructures.rst:401
msgid ""
"Though tuples may seem similar to lists, they are often used in different"
" situations and for different purposes. Tuples are :term:`immutable`, and"
" usually contain a heterogeneous sequence of elements that are accessed "
"via unpacking (see later in this section) or indexing (or even by "
"attribute in the case of :func:`namedtuples <collections.namedtuple>`). "
"Lists are :term:`mutable`, and their elements are usually homogeneous and"
" are accessed by iterating over the list."
msgstr ""

#: ../../tutorial/datastructures.rst:409
msgid ""
"A special problem is the construction of tuples containing 0 or 1 items: "
"the syntax has some extra quirks to accommodate these.  Empty tuples are "
"constructed by an empty pair of parentheses; a tuple with one item is "
"constructed by following a value with a comma (it is not sufficient to "
"enclose a single value in parentheses). Ugly, but effective.  For "
"example::"
msgstr ""

#: ../../tutorial/datastructures.rst:415
msgid ""
">>> empty = ()\n"
">>> singleton = 'hello',    # <-- note trailing comma\n"
">>> len(empty)\n"
"0\n"
">>> len(singleton)\n"
"1\n"
">>> singleton\n"
"('hello',)"
msgstr ""
">>> 空 = ()\n"
">>> 单例 = '你好',    # <-- 注意最后的逗号\n"
">>> len(空)\n"
"0\n"
">>> len(单例)\n"
"1\n"
">>> 单例\n"
"('你好',)"

#: ../../tutorial/datastructures.rst:424
msgid ""
"The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple "
"packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed "
"together in a tuple. The reverse operation is also possible::"
msgstr ""

#: ../../tutorial/datastructures.rst:428
msgid ">>> x, y, z = t"
msgstr ">>> 数1, 数2, 文本 = 元组"

#: ../../tutorial/datastructures.rst:430
msgid ""
"This is called, appropriately enough, *sequence unpacking* and works for "
"any sequence on the right-hand side.  Sequence unpacking requires that "
"there are as many variables on the left side of the equals sign as there "
"are elements in the sequence.  Note that multiple assignment is really "
"just a combination of tuple packing and sequence unpacking."
msgstr ""

#: ../../tutorial/datastructures.rst:440
msgid "Sets"
msgstr ""

#: ../../tutorial/datastructures.rst:442
msgid ""
"Python also includes a data type for *sets*.  A set is an unordered "
"collection with no duplicate elements.  Basic uses include membership "
"testing and eliminating duplicate entries.  Set objects also support "
"mathematical operations like union, intersection, difference, and "
"symmetric difference."
msgstr ""

#: ../../tutorial/datastructures.rst:447
msgid ""
"Curly braces or the :func:`set` function can be used to create sets.  "
"Note: to create an empty set you have to use ``set()``, not ``{}``; the "
"latter creates an empty dictionary, a data structure that we discuss in "
"the next section."
msgstr ""

#: ../../tutorial/datastructures.rst:451
msgid "Here is a brief demonstration::"
msgstr ""

#: ../../tutorial/datastructures.rst:453
# 集合中元素顺序有变
# TODO: unique翻译
msgid ""
">>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\n"
">>> print(basket)                      # show that duplicates have been "
"removed\n"
"{'orange', 'banana', 'pear', 'apple'}\n"
">>> 'orange' in basket                 # fast membership testing\n"
"True\n"
">>> 'crabgrass' in basket\n"
"False\n"
"\n"
">>> # Demonstrate set operations on unique letters from two words\n"
"...\n"
">>> a = set('abracadabra')\n"
">>> b = set('alacazam')\n"
">>> a                                  # unique letters in a\n"
"{'a', 'r', 'b', 'c', 'd'}\n"
">>> a - b                              # letters in a but not in b\n"
"{'r', 'd', 'b'}\n"
">>> a | b                              # letters in a or b or both\n"
"{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n"
">>> a & b                              # letters in both a and b\n"
"{'a', 'c'}\n"
">>> a ^ b                              # letters in a or b but not both\n"
"{'r', 'd', 'b', 'm', 'z', 'l'}"
msgstr ""
">>> 果篮 = {'苹果', '橙', '苹果', '梨', '橙', '香蕉'}\n"
">>> print(果篮)                      # 显示重复值已被除去\n"
"{'梨', '橙', '香蕉', '苹果'}\n"
">>> '橙' in 果篮                 # 快速测试是否在集合中\n"
"True\n"
">>> '茅草' in 果篮\n"
"False\n"
"\n"
">>> # 用两个短语中的字演示集合的操作\n"
"...\n"
">>> 甲 = set('一二一立定')\n"
">>> 乙 = set('一二三四')\n"
">>> 甲                                  # 甲中出现的字\n"
"{'一', '二', '定', '立'}\n"
">>> 甲 - 乙                              # 在甲中但不在乙中的字\n"
"{'定', '立'}\n"
">>> 甲 | 乙                              # 在甲或乙中的字\n"
"{'四', '三', '定', '一', '二', '立'}\n"
">>> 甲 & 乙                              # 同时在甲和乙中的字\n"
"{'一', '二'}\n"
">>> 甲 ^ 乙                              # 在甲或乙中, 但不同时在甲和乙中的字\n"
"{'三', '定', '四', '立'}"

#: ../../tutorial/datastructures.rst:476
msgid ""
"Similarly to :ref:`list comprehensions <tut-listcomps>`, set "
"comprehensions are also supported::"
msgstr ""

#: ../../tutorial/datastructures.rst:479
# 无翻译
msgid ""
">>> a = {x for x in 'abracadabra' if x not in 'abc'}\n"
">>> a\n"
"{'r', 'd'}"
msgstr ""
">>> a = {字 for 字 in '一二一立定' if 字 not in '一二'}\n"
">>> a\n"
"{'定', '立'}"

#: ../../tutorial/datastructures.rst:487
msgid "Dictionaries"
msgstr ""

#: ../../tutorial/datastructures.rst:489
msgid ""
"Another useful data type built into Python is the *dictionary* (see "
":ref:`typesmapping`). Dictionaries are sometimes found in other languages"
" as \"associative memories\" or \"associative arrays\".  Unlike "
"sequences, which are indexed by a range of numbers, dictionaries are "
"indexed by *keys*, which can be any immutable type; strings and numbers "
"can always be keys.  Tuples can be used as keys if they contain only "
"strings, numbers, or tuples; if a tuple contains any mutable object "
"either directly or indirectly, it cannot be used as a key. You can't use "
"lists as keys, since lists can be modified in place using index "
"assignments, slice assignments, or methods like :meth:`append` and "
":meth:`extend`."
msgstr ""

#: ../../tutorial/datastructures.rst:500
msgid ""
"It is best to think of a dictionary as an unordered set of *key: value* "
"pairs, with the requirement that the keys are unique (within one "
"dictionary). A pair of braces creates an empty dictionary: ``{}``. "
"Placing a comma-separated list of key:value pairs within the braces adds "
"initial key:value pairs to the dictionary; this is also the way "
"dictionaries are written on output."
msgstr ""

#: ../../tutorial/datastructures.rst:506
msgid ""
"The main operations on a dictionary are storing a value with some key and"
" extracting the value given the key.  It is also possible to delete a "
"key:value pair with ``del``. If you store using a key that is already in "
"use, the old value associated with that key is forgotten.  It is an error"
" to extract a value using a non-existent key."
msgstr ""

#: ../../tutorial/datastructures.rst:512
msgid ""
"Performing ``list(d.keys())`` on a dictionary returns a list of all the "
"keys used in the dictionary, in arbitrary order (if you want it sorted, "
"just use ``sorted(d.keys())`` instead). [2]_  To check whether a single "
"key is in the dictionary, use the :keyword:`in` keyword."
msgstr ""

#: ../../tutorial/datastructures.rst:517
msgid "Here is a small example using a dictionary::"
msgstr ""

#: ../../tutorial/datastructures.rst:519
# 代码溯源: https://zhuanlan.zhihu.com/p/36782954
# TODO: 改写人名, 更本土化
msgid ""
">>> tel = {'jack': 4098, 'sape': 4139}\n"
">>> tel['guido'] = 4127\n"
">>> tel\n"
"{'sape': 4139, 'guido': 4127, 'jack': 4098}\n"
">>> tel['jack']\n"
"4098\n"
">>> del tel['sape']\n"
">>> tel['irv'] = 4127\n"
">>> tel\n"
"{'guido': 4127, 'irv': 4127, 'jack': 4098}\n"
">>> list(tel.keys())\n"
"['irv', 'guido', 'jack']\n"
">>> sorted(tel.keys())\n"
"['guido', 'irv', 'jack']\n"
">>> 'guido' in tel\n"
"True\n"
">>> 'jack' not in tel\n"
"False"
msgstr ""
">>> 电话簿 = {'张三': 1234, '李四': 4321}\n"
">>> 电话簿['王五'] = 5678\n"
">>> 电话簿\n"
"{'张三': 1234, '李四': 4321, '王五': 5678}\n"
">>> 电话簿['张三']\n"
"1234\n"
">>> del 电话簿['李四']\n"
">>> 电话簿['小红'] = 5678\n"
">>> 电话簿\n"
"{'张三': 1234, '王五': 5678, '小红': 5678}\n"
">>> list(电话簿.keys())\n"
"['张三', '王五', '小红']\n"
">>> sorted(电话簿.keys())\n"
"['小红', '张三', '王五']\n"
">>> '王五' in 电话簿\n"
"True\n"
">>> '张三' not in 电话簿\n"
"False"

#: ../../tutorial/datastructures.rst:538
msgid ""
"The :func:`dict` constructor builds dictionaries directly from sequences "
"of key-value pairs::"
msgstr ""

#: ../../tutorial/datastructures.rst:541
msgid ""
">>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n"
"{'sape': 4321, '张三': 4098, 'guido': 4127}"
msgstr ""
">>> dict([('李四', 4321), ('王五', 5678), ('张三', 1234)])\n"
"{'李四': 4321, '王五': 5678, '张三': 1234}"

#: ../../tutorial/datastructures.rst:544
msgid ""
"In addition, dict comprehensions can be used to create dictionaries from "
"arbitrary key and value expressions::"
msgstr ""

#: ../../tutorial/datastructures.rst:547
msgid ""
">>> {x: x**2 for x in (2, 4, 6)}\n"
"{2: 4, 4: 16, 6: 36}"
msgstr ""
">>> {数: 数**2 for 数 in (2, 4, 6)}\n"
"{2: 4, 4: 16, 6: 36}"

#: ../../tutorial/datastructures.rst:550
msgid ""
"When the keys are simple strings, it is sometimes easier to specify pairs"
" using keyword arguments::"
msgstr ""

#: ../../tutorial/datastructures.rst:553
msgid ""
">>> dict(sape=4139, guido=4127, jack=4098)\n"
"{'sape': 4139, 'jack': 4098, 'guido': 4127}"
msgstr ""
">>> dict(李四=4321, 王五=5678, 张三=1234)\n"
"{'李四': 4321, '王五': 5678, '张三': 1234}"

#: ../../tutorial/datastructures.rst:560
msgid "Looping Techniques"
msgstr ""

#: ../../tutorial/datastructures.rst:562
msgid ""
"When looping through dictionaries, the key and corresponding value can be"
" retrieved at the same time using the :meth:`items` method. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:565
# Galahad the pure背景: https://en.wikipedia.org/wiki/Galahad
# TODO: 改写
msgid ""
">>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}\n"
">>> for k, v in knights.items():\n"
"...     print(k, v)\n"
"...\n"
"gallahad the pure\n"
"robin the brave"
msgstr ""
">>> 人物 = {'唐僧': '人', '孙悟空': '猴'}\n"
">>> for 键, 值 in 人物.items():\n"
"...     print(键, 值)\n"
"...\n"
"唐僧 人\n"
"孙悟空 猴"

#: ../../tutorial/datastructures.rst:572
msgid ""
"When looping through a sequence, the position index and corresponding "
"value can be retrieved at the same time using the :func:`enumerate` "
"function. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:575
msgid ""
">>> for i, v in enumerate(['tic', 'tac', 'toe']):\n"
"...     print(i, v)\n"
"...\n"
"0 tic\n"
"1 tac\n"
"2 toe"
msgstr ""
">>> for 索引, 值 in enumerate(['唐僧', '孙悟空', '猪八戒', '沙僧']):\n"
"...     print(索引, 值)\n"
"...\n"
"0 唐僧\n"
"1 孙悟空\n"
"2 猪八戒\n"
"3 沙僧"

#: ../../tutorial/datastructures.rst:582
msgid ""
"To loop over two or more sequences at the same time, the entries can be "
"paired with the :func:`zip` function. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:585
msgid ""
">>> questions = ['name', 'quest', 'favorite color']\n"
">>> answers = ['lancelot', 'the holy grail', 'blue']\n"
">>> for q, a in zip(questions, answers):\n"
"...     print('What is your {0}?  It is {1}.'.format(q, a))\n"
"...\n"
"What is your name?  It is lancelot.\n"
"What is your quest?  It is the holy grail.\n"
"What is your favorite color?  It is blue."
msgstr ""
">>> 问题 = ['名字', '追求', '喜爱颜色']\n"
">>> 答案 = ['玄奘', '真经', '无']\n"
">>> for 问, 答 in zip(问题, 答案):\n"
"...     print('你的{0}是什么?  是{1}.'.format(问, 答))\n"
"...\n"
"你的名字是什么?   是玄奘.\n"
"你的追求是什么?   是真经.\n"
"你的喜爱颜色是什么?   是无."

#: ../../tutorial/datastructures.rst:594
msgid ""
"To loop over a sequence in reverse, first specify the sequence in a "
"forward direction and then call the :func:`reversed` function. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:597
msgid ""
">>> for i in reversed(range(1, 10, 2)):\n"
"...     print(i)\n"
"...\n"
"9\n"
"7\n"
"5\n"
"3\n"
"1"
msgstr ""
">>> for 索引 in reversed(range(1, 10, 2)):\n"
"...     print(索引)\n"
"...\n"
"9\n"
"7\n"
"5\n"
"3\n"
"1"

#: ../../tutorial/datastructures.rst:606
msgid ""
"To loop over a sequence in sorted order, use the :func:`sorted` function "
"which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:609
# 由于是字符串排序, 仍然使用原英文名
msgid ""
">>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\n"
">>> for f in sorted(set(basket)):\n"
"...     print(f)\n"
"...\n"
"apple\n"
"banana\n"
"orange\n"
"pear"
msgstr ""
">>> 果篮 = ['苹果', '桔子', '苹果', '梨', '桔子', '香蕉']\n"
">>> for 水果 in sorted(set(果篮)):\n"
"...     print(水果)\n"
"...\n"
"桔子\n"
"梨\n"
"苹果\n"
"香蕉"

#: ../../tutorial/datastructures.rst:618
msgid ""
"It is sometimes tempting to change a list while you are looping over it; "
"however, it is often simpler and safer to create a new list instead. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:621
msgid ""
">>> import math\n"
">>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]"
"\n"
">>> filtered_data = []\n"
">>> for value in raw_data:\n"
"...     if not math.isnan(value):\n"
"...         filtered_data.append(value)\n"
"...\n"
">>> filtered_data\n"
"[56.2, 51.7, 55.3, 52.5, 47.8]"
msgstr ""
">>> import math\n"
">>> 原始数据 = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]"
"\n"
">>> 过滤后数据 = []\n"
">>> for 值 in 原始数据:\n"
"...     if not math.isnan(值):\n"
"...         过滤后数据.append(值)\n"
"...\n"
">>> 过滤后数据\n"
"[56.2, 51.7, 55.3, 52.5, 47.8]"

#: ../../tutorial/datastructures.rst:635
msgid "More on Conditions"
msgstr ""

#: ../../tutorial/datastructures.rst:637
msgid ""
"The conditions used in ``while`` and ``if`` statements can contain any "
"operators, not just comparisons."
msgstr ""

#: ../../tutorial/datastructures.rst:640
msgid ""
"The comparison operators ``in`` and ``not in`` check whether a value "
"occurs (does not occur) in a sequence.  The operators ``is`` and ``is "
"not`` compare whether two objects are really the same object; this only "
"matters for mutable objects like lists.  All comparison operators have "
"the same priority, which is lower than that of all numerical operators."
msgstr ""

#: ../../tutorial/datastructures.rst:646
msgid ""
"Comparisons can be chained.  For example, ``a < b == c`` tests whether "
"``a`` is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""

#: ../../tutorial/datastructures.rst:649
msgid ""
"Comparisons may be combined using the Boolean operators ``and`` and "
"``or``, and the outcome of a comparison (or of any other Boolean "
"expression) may be negated with ``not``.  These have lower priorities "
"than comparison operators; between them, ``not`` has the highest priority"
" and ``or`` the lowest, so that ``A and not B or C`` is equivalent to "
"``(A and (not B)) or C``. As always, parentheses can be used to express "
"the desired composition."
msgstr ""

#: ../../tutorial/datastructures.rst:656
msgid ""
"The Boolean operators ``and`` and ``or`` are so-called *short-circuit* "
"operators: their arguments are evaluated from left to right, and "
"evaluation stops as soon as the outcome is determined.  For example, if "
"``A`` and ``C`` are true but ``B`` is false, ``A and B and C`` does not "
"evaluate the expression ``C``.  When used as a general value and not as a"
" Boolean, the return value of a short-circuit operator is the last "
"evaluated argument."
msgstr ""

#: ../../tutorial/datastructures.rst:663
msgid ""
"It is possible to assign the result of a comparison or other Boolean "
"expression to a variable.  For example, ::"
msgstr ""

#: ../../tutorial/datastructures.rst:666
msgid ""
">>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'\n"
">>> non_null = string1 or string2 or string3\n"
">>> non_null\n"
"'Trondheim'"
msgstr ""
">>> 字符串1, 字符串2, 字符串3 = '', '混沌', '盘古'\n"
">>> 非空 = 字符串1 or 字符串2 or 字符串3\n"
">>> 非空\n"
"'混沌'"

#: ../../tutorial/datastructures.rst:671
msgid ""
"Note that in Python, unlike C, assignment cannot occur inside "
"expressions. C programmers may grumble about this, but it avoids a common"
" class of problems encountered in C programs: typing ``=`` in an "
"expression when ``==`` was intended."
msgstr ""

#: ../../tutorial/datastructures.rst:680
msgid "Comparing Sequences and Other Types"
msgstr ""

#: ../../tutorial/datastructures.rst:682
msgid ""
"Sequence objects may be compared to other objects with the same sequence "
"type. The comparison uses *lexicographical* ordering: first the first two"
" items are compared, and if they differ this determines the outcome of "
"the comparison; if they are equal, the next two items are compared, and "
"so on, until either sequence is exhausted. If two items to be compared "
"are themselves sequences of the same type, the lexicographical comparison"
" is carried out recursively.  If all items of two sequences compare "
"equal, the sequences are considered equal. If one sequence is an initial "
"sub-sequence of the other, the shorter sequence is the smaller (lesser) "
"one.  Lexicographical ordering for strings uses the Unicode code point "
"number to order individual characters.  Some examples of comparisons "
"between sequences of the same type::"
msgstr ""

#: ../../tutorial/datastructures.rst:694
# 字符串比较, 仍保留原字符串
# TODO: 详述汉字排序, ord('香')
msgid ""
"(1, 2, 3)              < (1, 2, 4)\n"
"[1, 2, 3]              < [1, 2, 4]\n"
"'ABC' < 'C' < 'Pascal' < 'Python'\n"
"(1, 2, 3, 4)           < (1, 2, 4)\n"
"(1, 2)                 < (1, 2, -1)\n"
"(1, 2, 3)             == (1.0, 2.0, 3.0)\n"
"(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)"
msgstr ""
"(1, 2, 3)              < (1, 2, 4)\n"
"[1, 2, 3]              < [1, 2, 4]\n"
"'ABC' < 'C' < 'Pascal' < 'Python' < '易语言'\n"
"(1, 2, 3, 4)           < (1, 2, 4)\n"
"(1, 2)                 < (1, 2, -1)\n"
"(1, 2, 3)             == (1.0, 2.0, 3.0)\n"
"(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)\n"
"'苹果'                  < '香蕉'   # 由于汉字编码. ord('苹') = 33529, ord('香') = 39321"

#: ../../tutorial/datastructures.rst:702
msgid ""
"Note that comparing objects of different types with ``<`` or ``>`` is "
"legal provided that the objects have appropriate comparison methods.  For"
" example, mixed numeric types are compared according to their numeric "
"value, so 0 equals 0.0, etc.  Otherwise, rather than providing an "
"arbitrary ordering, the interpreter will raise a :exc:`TypeError` "
"exception."
msgstr ""

#: ../../tutorial/datastructures.rst:710
msgid "Footnotes"
msgstr ""

#: ../../tutorial/datastructures.rst:711
msgid ""
"Other languages may return the mutated object, which allows method "
"chaining, such as ``d->insert(\"a\")->remove(\"b\")->sort();``."
msgstr ""

#: ../../tutorial/datastructures.rst:714
msgid ""
"Calling ``d.keys()`` will return a :dfn:`dictionary view` object.  It "
"supports operations like membership test and iteration, but its contents "
"are not independent of the original dictionary -- it is only a *view*."
msgstr ""

