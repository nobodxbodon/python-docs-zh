# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../tutorial/stdlib.rst:5
msgid "Brief Tour of the Standard Library"
msgstr ""

#: ../../tutorial/stdlib.rst:11
msgid "Operating System Interface"
msgstr ""

#: ../../tutorial/stdlib.rst:13
msgid ""
"The :mod:`os` module provides dozens of functions for interacting with "
"the operating system::"
msgstr ""

#: ../../tutorial/stdlib.rst:16
msgid ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python36'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system "
"shell\n"
"0"
msgstr ""

#: ../../tutorial/stdlib.rst:23
msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""

#: ../../tutorial/stdlib.rst:29
msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr ""

#: ../../tutorial/stdlib.rst:32
msgid ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"
msgstr ""

#: ../../tutorial/stdlib.rst:38
msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr ""

#: ../../tutorial/stdlib.rst:41
msgid ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"
msgstr ""

#: ../../tutorial/stdlib.rst:51
msgid "File Wildcards"
msgstr ""

#: ../../tutorial/stdlib.rst:53
msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ""

#: ../../tutorial/stdlib.rst:56
msgid ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"
msgstr ""

#: ../../tutorial/stdlib.rst:64
msgid "Command Line Arguments"
msgstr ""

#: ../../tutorial/stdlib.rst:66
msgid ""
"Common utility scripts often need to process command line arguments. "
"These arguments are stored in the :mod:`sys` module's *argv* attribute as"
" a list.  For instance the following output results from running ``python"
" demo.py one two three`` at the command line::"
msgstr ""

#: ../../tutorial/stdlib.rst:71
msgid ""
">>> import sys\n"
">>> print(sys.argv)\n"
"['demo.py', 'one', 'two', 'three']"
msgstr ""

#: ../../tutorial/stdlib.rst:75
msgid ""
"The :mod:`getopt` module processes *sys.argv* using the conventions of "
"the Unix :func:`getopt` function.  More powerful and flexible command "
"line processing is provided by the :mod:`argparse` module."
msgstr ""

#: ../../tutorial/stdlib.rst:83
msgid "Error Output Redirection and Program Termination"
msgstr ""

#: ../../tutorial/stdlib.rst:85
msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages "
"to make them visible even when *stdout* has been redirected::"
msgstr ""

#: ../../tutorial/stdlib.rst:89
msgid ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')"
"\n"
"Warning, log file not found starting a new one"
msgstr ""

#: ../../tutorial/stdlib.rst:92
msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr ""

#: ../../tutorial/stdlib.rst:98
msgid "String Pattern Matching"
msgstr ""

#: ../../tutorial/stdlib.rst:100
msgid ""
"The :mod:`re` module provides regular expression tools for advanced "
"string processing. For complex matching and manipulation, regular "
"expressions offer succinct, optimized solutions::"
msgstr ""

#: ../../tutorial/stdlib.rst:104
msgid ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"
msgstr ""

#: ../../tutorial/stdlib.rst:110
msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr ""

#: ../../tutorial/stdlib.rst:113
msgid ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"
msgstr ""

#: ../../tutorial/stdlib.rst:120
msgid "Mathematics"
msgstr ""

#: ../../tutorial/stdlib.rst:122
msgid ""
"The :mod:`math` module gives access to the underlying C library functions"
" for floating point math::"
msgstr ""

#: ../../tutorial/stdlib.rst:125
msgid ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"
msgstr ""

#: ../../tutorial/stdlib.rst:131
msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ""

#: ../../tutorial/stdlib.rst:133
msgid ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # sampling without replacement\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # random float\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # random integer chosen from range(6)\n"
"4"
msgstr ""

#: ../../tutorial/stdlib.rst:143
msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the"
" mean, median, variance, etc.) of numeric data::"
msgstr ""

#: ../../tutorial/stdlib.rst:146
msgid ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"
msgstr ""

#: ../../tutorial/stdlib.rst:155
msgid ""
"The SciPy project <https://scipy.org> has many other modules for "
"numerical computations."
msgstr ""

#: ../../tutorial/stdlib.rst:161
msgid "Internet Access"
msgstr ""

#: ../../tutorial/stdlib.rst:163
msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""

#: ../../tutorial/stdlib.rst:167
msgid ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode('utf-8')  # Decoding the binary data to "
"text.\n"
"...         if 'EST' in line or 'EDT' in line:  # look for Eastern Time\n"
"...             print(line)\n"
"\n"
"<BR>Nov. 25, 09:43:32 PM EST\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"
msgstr ""

#: ../../tutorial/stdlib.rst:186
msgid "(Note that the second example needs a mailserver running on localhost.)"
msgstr ""

#: ../../tutorial/stdlib.rst:192
msgid "Dates and Times"
msgstr ""

#: ../../tutorial/stdlib.rst:194
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and "
"times in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member "
"extraction for output formatting and manipulation.  The module also "
"supports objects that are timezone aware. ::"
msgstr ""

#: ../../tutorial/stdlib.rst:200
#, python-format
msgid ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"
msgstr ""

#: ../../tutorial/stdlib.rst:218
msgid "Data Compression"
msgstr ""

#: ../../tutorial/stdlib.rst:220
msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, "
":mod:`zipfile` and :mod:`tarfile`. ::"
msgstr ""

#: ../../tutorial/stdlib.rst:224
msgid ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"
msgstr ""

#: ../../tutorial/stdlib.rst:240
msgid "Performance Measurement"
msgstr ""

#: ../../tutorial/stdlib.rst:242
msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides "
"a measurement tool that answers those questions immediately."
msgstr ""

#: ../../tutorial/stdlib.rst:246
msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The "
":mod:`timeit` module quickly demonstrates a modest performance "
"advantage::"
msgstr ""

#: ../../tutorial/stdlib.rst:250
msgid ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"
msgstr ""

#: ../../tutorial/stdlib.rst:256
msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the "
":mod:`profile` and :mod:`pstats` modules provide tools for identifying "
"time critical sections in larger blocks of code."
msgstr ""

#: ../../tutorial/stdlib.rst:264
msgid "Quality Control"
msgstr ""

#: ../../tutorial/stdlib.rst:266
msgid ""
"One approach for developing high quality software is to write tests for "
"each function as it is developed and to run those tests frequently during"
" the development process."
msgstr ""

#: ../../tutorial/stdlib.rst:270
msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction "
"is as simple as cutting-and-pasting a typical call along with its results"
" into the docstring. This improves the documentation by providing the "
"user with an example and it allows the doctest module to make sure the "
"code remains true to the documentation::"
msgstr ""

#: ../../tutorial/stdlib.rst:277
msgid ""
"def average(values):\n"
"    \"\"\"Computes the arithmetic mean of a list of numbers.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # automatically validate the embedded tests"
msgstr ""

#: ../../tutorial/stdlib.rst:288
msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained "
"in a separate file::"
msgstr ""

#: ../../tutorial/stdlib.rst:292
msgid ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"
msgstr ""

#: ../../tutorial/stdlib.rst:310
msgid "Batteries Included"
msgstr ""

#: ../../tutorial/stdlib.rst:312
msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen "
"through the sophisticated and robust capabilities of its larger packages."
" For example:"
msgstr ""

#: ../../tutorial/stdlib.rst:315
msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make "
"implementing remote procedure calls into an almost trivial task.  Despite"
" the modules names, no direct knowledge or handling of XML is needed."
msgstr ""

#: ../../tutorial/stdlib.rst:319
msgid ""
"The :mod:`email` package is a library for managing email messages, "
"including MIME and other RFC 2822-based message documents. Unlike "
":mod:`smtplib` and :mod:`poplib` which actually send and receive "
"messages, the email package has a complete toolset for building or "
"decoding complex message structures (including attachments) and for "
"implementing internet encoding and header protocols."
msgstr ""

#: ../../tutorial/stdlib.rst:326
msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading "
"and writing of files in Comma-Separated Value format, commonly supported "
"by databases and spreadsheets.  XML processing is supported by the "
":mod:`xml.etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages."
" Together, these modules and packages greatly simplify data interchange "
"between Python applications and other tools."
msgstr ""

#: ../../tutorial/stdlib.rst:335
msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""

#: ../../tutorial/stdlib.rst:339
msgid ""
"Internationalization is supported by a number of modules including "
":mod:`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""

