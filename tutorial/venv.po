# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../tutorial/venv.rst:6
msgid "Virtual Environments and Packages"
msgstr ""

#: ../../tutorial/venv.rst:9
msgid "Introduction"
msgstr ""

#: ../../tutorial/venv.rst:11
msgid ""
"Python applications will often use packages and modules that don't come "
"as part of the standard library.  Applications will sometimes need a "
"specific version of a library, because the application may require that a"
" particular bug has been fixed or the application may be written using an"
" obsolete version of the library's interface."
msgstr ""

#: ../../tutorial/venv.rst:17
msgid ""
"This means it may not be possible for one Python installation to meet the"
" requirements of every application.  If application A needs version 1.0 "
"of a particular module but application B needs version 2.0, then the "
"requirements are in conflict and installing either version 1.0 or 2.0 "
"will leave one application unable to run."
msgstr ""

#: ../../tutorial/venv.rst:23
msgid ""
"The solution for this problem is to create a :term:`virtual environment`,"
" a self-contained directory tree that contains a Python installation for "
"a particular version of Python, plus a number of additional packages."
msgstr ""

#: ../../tutorial/venv.rst:27
msgid ""
"Different applications can then use different virtual environments. To "
"resolve the earlier example of conflicting requirements, application A "
"can have its own virtual environment with version 1.0 installed while "
"application B has another virtual environment with version 2.0. If "
"application B requires a library be upgraded to version 3.0, this will "
"not affect application A's environment."
msgstr ""

#: ../../tutorial/venv.rst:36
msgid "Creating Virtual Environments"
msgstr ""

#: ../../tutorial/venv.rst:38
msgid ""
"The module used to create and manage virtual environments is called "
":mod:`venv`.  :mod:`venv` will usually install the most recent version of"
" Python that you have available. If you have multiple versions of Python "
"on your system, you can select a specific Python version by running "
"``python3`` or whichever version you want."
msgstr ""

#: ../../tutorial/venv.rst:44
msgid ""
"To create a virtual environment, decide upon a directory where you want "
"to place it, and run the :mod:`venv` module as a script with the "
"directory path::"
msgstr ""

#: ../../tutorial/venv.rst:47
msgid "python3 -m venv tutorial-env"
msgstr ""

#: ../../tutorial/venv.rst:49
msgid ""
"This will create the ``tutorial-env`` directory if it doesn't exist, and "
"also create directories inside it containing a copy of the Python "
"interpreter, the standard library, and various supporting files."
msgstr ""

#: ../../tutorial/venv.rst:53
msgid "Once you've created a virtual environment, you may activate it."
msgstr ""

#: ../../tutorial/venv.rst:55
msgid "On Windows, run::"
msgstr ""

#: ../../tutorial/venv.rst:57
msgid "tutorial-env\\Scripts\\activate.bat"
msgstr ""

#: ../../tutorial/venv.rst:59
msgid "On Unix or MacOS, run::"
msgstr ""

#: ../../tutorial/venv.rst:61
msgid "source tutorial-env/bin/activate"
msgstr ""

#: ../../tutorial/venv.rst:63
msgid ""
"(This script is written for the bash shell.  If you use the "
":program:`csh` or :program:`fish` shells, there are alternate "
"``activate.csh`` and ``activate.fish`` scripts you should use instead.)"
msgstr ""

#: ../../tutorial/venv.rst:68
msgid ""
"Activating the virtual environment will change your shell's prompt to "
"show what virtual environment you're using, and modify the environment so"
" that running ``python`` will get you that particular version and "
"installation of Python. For example:"
msgstr ""

#: ../../tutorial/venv.rst:73
msgid ""
"$ source ~/envs/tutorial-env/bin/activate\n"
"(tutorial-env) $ python\n"
"Python 3.5.1 (default, May  6 2016, 10:59:36)\n"
"  ...\n"
">>> import sys\n"
">>> sys.path\n"
"['', '/usr/local/lib/python35.zip', ...,\n"
"'~/envs/tutorial-env/lib/python3.5/site-packages']\n"
">>>"
msgstr ""

#: ../../tutorial/venv.rst:87
msgid "Managing Packages with pip"
msgstr ""

#: ../../tutorial/venv.rst:89
msgid ""
"You can install, upgrade, and remove packages using a program called "
":program:`pip`.  By default ``pip`` will install packages from the Python"
" Package Index, <https://pypi.python.org/pypi>.  You can browse the "
"Python Package Index by going to it in your web browser, or you can use "
"``pip``'s limited search feature:"
msgstr ""

#: ../../tutorial/venv.rst:95
msgid ""
"(tutorial-env) $ pip search astronomy\n"
"skyfield               - Elegant astronomy for Python\n"
"gary                   - Galactic astronomy and gravitational dynamics.\n"
"novas                  - The United States Naval Observatory NOVAS "
"astronomy library\n"
"astroobs               - Provides astronomy ephemeris to plan telescope "
"observations\n"
"PyAstronomy            - A collection of astronomy related tools for "
"Python.\n"
"..."
msgstr ""

#: ../../tutorial/venv.rst:105
msgid ""
"``pip`` has a number of subcommands: \"search\", \"install\", "
"\"uninstall\", \"freeze\", etc.  (Consult the :ref:`installing-index` "
"guide for complete documentation for ``pip``.)"
msgstr ""

#: ../../tutorial/venv.rst:109
msgid ""
"You can install the latest version of a package by specifying a package's"
" name:"
msgstr ""

#: ../../tutorial/venv.rst:111
msgid ""
"(tutorial-env) $ pip install novas\n"
"Collecting novas\n"
"  Downloading novas-3.1.1.3.tar.gz (136kB)\n"
"Installing collected packages: novas\n"
"  Running setup.py install for novas\n"
"Successfully installed novas-3.1.1.3"
msgstr ""

#: ../../tutorial/venv.rst:120
msgid ""
"You can also install a specific version of a package by giving the "
"package name  followed by ``==`` and the version number:"
msgstr ""

#: ../../tutorial/venv.rst:123
msgid ""
"(tutorial-env) $ pip install requests==2.6.0\n"
"Collecting requests==2.6.0\n"
"  Using cached requests-2.6.0-py2.py3-none-any.whl\n"
"Installing collected packages: requests\n"
"Successfully installed requests-2.6.0"
msgstr ""

#: ../../tutorial/venv.rst:131
msgid ""
"If you re-run this command, ``pip`` will notice that the requested "
"version is already installed and do nothing.  You can supply a different "
"version number to get that version, or you can run ``pip install "
"--upgrade`` to upgrade the package to the latest version:"
msgstr ""

#: ../../tutorial/venv.rst:136
msgid ""
"(tutorial-env) $ pip install --upgrade requests\n"
"Collecting requests\n"
"Installing collected packages: requests\n"
"  Found existing installation: requests 2.6.0\n"
"    Uninstalling requests-2.6.0:\n"
"      Successfully uninstalled requests-2.6.0\n"
"Successfully installed requests-2.7.0"
msgstr ""

#: ../../tutorial/venv.rst:146
msgid ""
"``pip uninstall`` followed by one or more package names will remove the "
"packages from the virtual environment."
msgstr ""

#: ../../tutorial/venv.rst:149
msgid "``pip show`` will display information about a particular package:"
msgstr ""

#: ../../tutorial/venv.rst:151
msgid ""
"(tutorial-env) $ pip show requests\n"
"---\n"
"Metadata-Version: 2.0\n"
"Name: requests\n"
"Version: 2.7.0\n"
"Summary: Python HTTP for Humans.\n"
"Home-page: http://python-requests.org\n"
"Author: Kenneth Reitz\n"
"Author-email: me@kennethreitz.com\n"
"License: Apache 2.0\n"
"Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages\n"
"Requires:"
msgstr ""

#: ../../tutorial/venv.rst:166
msgid ""
"``pip list`` will display all of the packages installed in the virtual "
"environment:"
msgstr ""

#: ../../tutorial/venv.rst:169
msgid ""
"(tutorial-env) $ pip list\n"
"novas (3.1.1.3)\n"
"numpy (1.9.2)\n"
"pip (7.0.3)\n"
"requests (2.7.0)\n"
"setuptools (16.0)"
msgstr ""

#: ../../tutorial/venv.rst:178
msgid ""
"``pip freeze`` will produce a similar list of the installed packages, but"
" the output uses the format that ``pip install`` expects. A common "
"convention is to put this list in a ``requirements.txt`` file:"
msgstr ""

#: ../../tutorial/venv.rst:182
msgid ""
"(tutorial-env) $ pip freeze > requirements.txt\n"
"(tutorial-env) $ cat requirements.txt\n"
"novas==3.1.1.3\n"
"numpy==1.9.2\n"
"requests==2.7.0"
msgstr ""

#: ../../tutorial/venv.rst:190
msgid ""
"The ``requirements.txt`` can then be committed to version control and "
"shipped as part of an application.  Users can then install all the "
"necessary packages with ``install -r``:"
msgstr ""

#: ../../tutorial/venv.rst:194
msgid ""
"(tutorial-env) $ pip install -r requirements.txt\n"
"Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))\n"
"  ...\n"
"Collecting numpy==1.9.2 (from -r requirements.txt (line 2))\n"
"  ...\n"
"Collecting requests==2.7.0 (from -r requirements.txt (line 3))\n"
"  ...\n"
"Installing collected packages: novas, numpy, requests\n"
"  Running setup.py install for novas\n"
"Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0"
msgstr ""

#: ../../tutorial/venv.rst:207
msgid ""
"``pip`` has many more options.  Consult the :ref:`installing-index` guide"
" for complete documentation for ``pip``.  When you've written a package "
"and want to make it available on the Python Package Index, consult the "
":ref:`distributing-index` guide."
msgstr ""

