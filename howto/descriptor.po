# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../howto/descriptor.rst:3
msgid "Descriptor HowTo Guide"
msgstr ""

#: ../../howto/descriptor.rst
msgid "Author"
msgstr ""

#: ../../howto/descriptor.rst:5
msgid "Raymond Hettinger"
msgstr ""

#: ../../howto/descriptor.rst
msgid "Contact"
msgstr ""

#: ../../howto/descriptor.rst:6
msgid "<python at rcn dot com>"
msgstr ""

#: ../../howto/descriptor.rst:11
msgid "Abstract"
msgstr ""

#: ../../howto/descriptor.rst:13
msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors "
"are called.  Examines a custom descriptor and several built-in python "
"descriptors including functions, properties, static methods, and class "
"methods.  Shows how each works by giving a pure Python equivalent and a "
"sample application."
msgstr ""

#: ../../howto/descriptor.rst:18
msgid ""
"Learning about descriptors not only provides access to a larger toolset, "
"it creates a deeper understanding of how Python works and an appreciation"
" for the elegance of its design."
msgstr ""

#: ../../howto/descriptor.rst:24
msgid "Definition and Introduction"
msgstr ""

#: ../../howto/descriptor.rst:26
msgid ""
"In general, a descriptor is an object attribute with \"binding "
"behavior\", one whose attribute access has been overridden by methods in "
"the descriptor protocol.  Those methods are :meth:`__get__`, "
":meth:`__set__`, and :meth:`__delete__`.  If any of those methods are "
"defined for an object, it is said to be a descriptor."
msgstr ""

#: ../../howto/descriptor.rst:32
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a "
"lookup chain starting with ``a.__dict__['x']``, then "
"``type(a).__dict__['x']``, and continuing through the base classes of "
"``type(a)`` excluding metaclasses. If the looked-up value is an object "
"defining one of the descriptor methods, then Python may override the "
"default behavior and invoke the descriptor method instead. Where this "
"occurs in the precedence chain depends on which descriptor methods were "
"defined."
msgstr ""

#: ../../howto/descriptor.rst:41
msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and "
":func:`super()`. They are used throughout Python itself to implement the "
"new style classes introduced in version 2.2.  Descriptors simplify the "
"underlying C-code and offer a flexible set of new tools for everyday "
"Python programs."
msgstr ""

#: ../../howto/descriptor.rst:49
msgid "Descriptor Protocol"
msgstr ""

#: ../../howto/descriptor.rst:51
msgid "``descr.__get__(self, obj, type=None) --> value``"
msgstr ""

#: ../../howto/descriptor.rst:53
msgid "``descr.__set__(self, obj, value) --> None``"
msgstr ""

#: ../../howto/descriptor.rst:55
msgid "``descr.__delete__(self, obj) --> None``"
msgstr ""

#: ../../howto/descriptor.rst:57
msgid ""
"That is all there is to it.  Define any of these methods and an object is"
" considered a descriptor and can override default behavior upon being "
"looked up as an attribute."
msgstr ""

#: ../../howto/descriptor.rst:61
msgid ""
"If an object defines both :meth:`__get__` and :meth:`__set__`, it is "
"considered a data descriptor.  Descriptors that only define "
":meth:`__get__` are called non-data descriptors (they are typically used "
"for methods but other uses are possible)."
msgstr ""

#: ../../howto/descriptor.rst:66
msgid ""
"Data and non-data descriptors differ in how overrides are calculated with"
" respect to entries in an instance's dictionary.  If an instance's "
"dictionary has an entry with the same name as a data descriptor, the data"
" descriptor takes precedence.  If an instance's dictionary has an entry "
"with the same name as a non-data descriptor, the dictionary entry takes "
"precedence."
msgstr ""

#: ../../howto/descriptor.rst:72
msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and "
":meth:`__set__` with the :meth:`__set__` raising an :exc:`AttributeError`"
" when called.  Defining the :meth:`__set__` method with an exception "
"raising placeholder is enough to make it a data descriptor."
msgstr ""

#: ../../howto/descriptor.rst:79
msgid "Invoking Descriptors"
msgstr ""

#: ../../howto/descriptor.rst:81
msgid ""
"A descriptor can be called directly by its method name.  For example, "
"``d.__get__(obj)``."
msgstr ""

#: ../../howto/descriptor.rst:84
msgid ""
"Alternatively, it is more common for a descriptor to be invoked "
"automatically upon attribute access.  For example, ``obj.d`` looks up "
"``d`` in the dictionary of ``obj``.  If ``d`` defines the method "
":meth:`__get__`, then ``d.__get__(obj)`` is invoked according to the "
"precedence rules listed below."
msgstr ""

#: ../../howto/descriptor.rst:89
msgid ""
"The details of invocation depend on whether ``obj`` is an object or a "
"class."
msgstr ""

#: ../../howto/descriptor.rst:91
msgid ""
"For objects, the machinery is in :meth:`object.__getattribute__` which "
"transforms ``b.x`` into ``type(b).__dict__['x'].__get__(b, type(b))``.  "
"The implementation works through a precedence chain that gives data "
"descriptors priority over instance variables, instance variables priority"
" over non-data descriptors, and assigns lowest priority to "
":meth:`__getattr__` if provided. The full C implementation can be found "
"in :c:func:`PyObject_GenericGetAttr()` in :source:`Objects/object.c`."
msgstr ""

#: ../../howto/descriptor.rst:99
msgid ""
"For classes, the machinery is in :meth:`type.__getattribute__` which "
"transforms ``B.x`` into ``B.__dict__['x'].__get__(None, B)``.  In pure "
"Python, it looks like::"
msgstr ""

#: ../../howto/descriptor.rst:103
msgid ""
"def __getattribute__(self, key):\n"
"    \"Emulate type_getattro() in Objects/typeobject.c\"\n"
"    v = object.__getattribute__(self, key)\n"
"    if hasattr(v, '__get__'):\n"
"        return v.__get__(None, self)\n"
"    return v"
msgstr ""

#: ../../howto/descriptor.rst:110
msgid "The important points to remember are:"
msgstr ""

#: ../../howto/descriptor.rst:112
msgid "descriptors are invoked by the :meth:`__getattribute__` method"
msgstr ""

#: ../../howto/descriptor.rst:113
msgid "overriding :meth:`__getattribute__` prevents automatic descriptor calls"
msgstr ""

#: ../../howto/descriptor.rst:114
msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`."
msgstr ""

#: ../../howto/descriptor.rst:116
msgid "data descriptors always override instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:117
msgid "non-data descriptors may be overridden by instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:119
msgid ""
"The object returned by ``super()`` also has a custom "
":meth:`__getattribute__` method for invoking descriptors.  The call "
"``super(B, obj).m()`` searches ``obj.__class__.__mro__`` for the base "
"class ``A`` immediately following ``B`` and then returns "
"``A.__dict__['m'].__get__(obj, B)``.  If not a descriptor, ``m`` is "
"returned unchanged.  If not in the dictionary, ``m`` reverts to a search "
"using :meth:`object.__getattribute__`."
msgstr ""

#: ../../howto/descriptor.rst:126
msgid ""
"The implementation details are in :c:func:`super_getattro()` in "
":source:`Objects/typeobject.c`.  and a pure Python equivalent can be "
"found in `Guido's Tutorial`_."
msgstr ""

#: ../../howto/descriptor.rst:132
msgid ""
"The details above show that the mechanism for descriptors is embedded in "
"the :meth:`__getattribute__()` methods for :class:`object`, "
":class:`type`, and :func:`super`.  Classes inherit this machinery when "
"they derive from :class:`object` or if they have a meta-class providing "
"similar functionality. Likewise, classes can turn-off descriptor "
"invocation by overriding :meth:`__getattribute__()`."
msgstr ""

#: ../../howto/descriptor.rst:141
msgid "Descriptor Example"
msgstr ""

#: ../../howto/descriptor.rst:143
msgid ""
"The following code creates a class whose objects are data descriptors "
"which print a message for each get or set.  Overriding "
":meth:`__getattribute__` is alternate approach that could do this for "
"every attribute.  However, this descriptor is useful for monitoring just "
"a few chosen attributes::"
msgstr ""

#: ../../howto/descriptor.rst:148
msgid ""
"class RevealAccess(object):\n"
"    \"\"\"A data descriptor that sets and returns values\n"
"       normally and prints a message logging their access.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, initval=None, name='var'):\n"
"        self.val = initval\n"
"        self.name = name\n"
"\n"
"    def __get__(self, obj, objtype):\n"
"        print('Retrieving', self.name)\n"
"        return self.val\n"
"\n"
"    def __set__(self, obj, val):\n"
"        print('Updating', self.name)\n"
"        self.val = val\n"
"\n"
">>> class MyClass(object):\n"
"...     x = RevealAccess(10, 'var \"x\"')\n"
"...     y = 5\n"
"...\n"
">>> m = MyClass()\n"
">>> m.x\n"
"Retrieving var \"x\"\n"
"10\n"
">>> m.x = 20\n"
"Updating var \"x\"\n"
">>> m.x\n"
"Retrieving var \"x\"\n"
"20\n"
">>> m.y\n"
"5"
msgstr ""

#: ../../howto/descriptor.rst:181
msgid ""
"The protocol is simple and offers exciting possibilities.  Several use "
"cases are so common that they have been packaged into individual function"
" calls. Properties, bound methods, static methods, and class methods are "
"all based on the descriptor protocol."
msgstr ""

#: ../../howto/descriptor.rst:188
msgid "Properties"
msgstr ""

#: ../../howto/descriptor.rst:190
msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers function calls upon access to an attribute.  Its signature "
"is::"
msgstr ""

#: ../../howto/descriptor.rst:193
msgid "property(fget=None, fset=None, fdel=None, doc=None) -> property attribute"
msgstr ""

#: ../../howto/descriptor.rst:195
msgid ""
"The documentation shows a typical use to define a managed attribute "
"``x``::"
msgstr ""

#: ../../howto/descriptor.rst:197
msgid ""
"class C(object):\n"
"    def getx(self): return self.__x\n"
"    def setx(self, value): self.__x = value\n"
"    def delx(self): del self.__x\n"
"    x = property(getx, setx, delx, \"I'm the 'x' property.\")"
msgstr ""

#: ../../howto/descriptor.rst:203
msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent::"
msgstr ""

#: ../../howto/descriptor.rst:206
msgid ""
"class Property(object):\n"
"    \"Emulate PyProperty_Type() in Objects/descrobject.c\"\n"
"\n"
"    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n"
"        self.fget = fget\n"
"        self.fset = fset\n"
"        self.fdel = fdel\n"
"        if doc is None and fget is not None:\n"
"            doc = fget.__doc__\n"
"        self.__doc__ = doc\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        if obj is None:\n"
"            return self\n"
"        if self.fget is None:\n"
"            raise AttributeError(\"unreadable attribute\")\n"
"        return self.fget(obj)\n"
"\n"
"    def __set__(self, obj, value):\n"
"        if self.fset is None:\n"
"            raise AttributeError(\"can't set attribute\")\n"
"        self.fset(obj, value)\n"
"\n"
"    def __delete__(self, obj):\n"
"        if self.fdel is None:\n"
"            raise AttributeError(\"can't delete attribute\")\n"
"        self.fdel(obj)\n"
"\n"
"    def getter(self, fget):\n"
"        return type(self)(fget, self.fset, self.fdel, self.__doc__)\n"
"\n"
"    def setter(self, fset):\n"
"        return type(self)(self.fget, fset, self.fdel, self.__doc__)\n"
"\n"
"    def deleter(self, fdel):\n"
"        return type(self)(self.fget, self.fset, fdel, self.__doc__)"
msgstr ""

#: ../../howto/descriptor.rst:243
msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of "
"a method."
msgstr ""

#: ../../howto/descriptor.rst:247
msgid ""
"For instance, a spreadsheet class may grant access to a cell value "
"through ``Cell('b10').value``. Subsequent improvements to the program "
"require the cell to be recalculated on every access; however, the "
"programmer does not want to affect existing client code accessing the "
"attribute directly.  The solution is to wrap access to the value "
"attribute in a property data descriptor::"
msgstr ""

#: ../../howto/descriptor.rst:253
msgid ""
"class Cell(object):\n"
"    . . .\n"
"    def getvalue(self):\n"
"        \"Recalculate the cell before returning value\"\n"
"        self.recalc()\n"
"        return self._value\n"
"    value = property(getvalue)"
msgstr ""

#: ../../howto/descriptor.rst:263
msgid "Functions and Methods"
msgstr ""

#: ../../howto/descriptor.rst:265
msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""

#: ../../howto/descriptor.rst:268
msgid ""
"Class dictionaries store methods as functions.  In a class definition, "
"methods are written using :keyword:`def` or :keyword:`lambda`, the usual "
"tools for creating functions.  Methods only differ from regular functions"
" in that the first argument is reserved for the object instance.  By "
"Python convention, the instance reference is called *self* but may be "
"called *this* or any other variable name."
msgstr ""

#: ../../howto/descriptor.rst:275
msgid ""
"To support method calls, functions include the :meth:`__get__` method for"
" binding methods during attribute access.  This means that all functions "
"are non-data descriptors which return bound methods when they are invoked"
" from an object.  In pure python, it works like this::"
msgstr ""

#: ../../howto/descriptor.rst:280
msgid ""
"class Function(object):\n"
"    . . .\n"
"    def __get__(self, obj, objtype=None):\n"
"        \"Simulate func_descr_get() in Objects/funcobject.c\"\n"
"        if obj is None:\n"
"            return self\n"
"        return types.MethodType(self, obj)"
msgstr ""

#: ../../howto/descriptor.rst:288
msgid ""
"Running the interpreter shows how the function descriptor works in "
"practice::"
msgstr ""

#: ../../howto/descriptor.rst:290
msgid ""
">>> class D(object):\n"
"...     def f(self, x):\n"
"...         return x\n"
"...\n"
">>> d = D()\n"
"\n"
"# Access through the class dictionary does not invoke __get__.\n"
"# It just returns the underlying function object.\n"
">>> D.__dict__['f']\n"
"<function D.f at 0x00C45070>\n"
"\n"
"# Dotted access from a class calls __get__() which just returns\n"
"# the underlying function unchanged.\n"
">>> D.f\n"
"<function D.f at 0x00C45070>\n"
"\n"
"# The function has a __qualname__ attribute to support introspection\n"
">>> D.f.__qualname__\n"
"'D.f'\n"
"\n"
"# Dotted access from an instance calls __get__() which returns the\n"
"# function wrapped in a bound method object\n"
">>> d.f\n"
"<bound method D.f of <__main__.D object at 0x00B18C90>>\n"
"\n"
"# Internally, the bound method stores the underlying function,\n"
"# the bound instance, and the class of the bound instance.\n"
">>> d.f.__func__\n"
"<function D.f at 0x1012e5ae8>\n"
">>> d.f.__self__\n"
"<__main__.D object at 0x1012e1f98>\n"
">>> d.f.__class__\n"
"<class 'method'>"
msgstr ""

#: ../../howto/descriptor.rst:326
msgid "Static Methods and Class Methods"
msgstr ""

#: ../../howto/descriptor.rst:328
msgid ""
"Non-data descriptors provide a simple mechanism for variations on the "
"usual patterns of binding functions into methods."
msgstr ""

#: ../../howto/descriptor.rst:331
msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data "
"descriptor transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  "
"Calling ``klass.f(*args)`` becomes ``f(*args)``."
msgstr ""

#: ../../howto/descriptor.rst:336
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""

#: ../../howto/descriptor.rst:339
msgid "Transformation"
msgstr ""

#: ../../howto/descriptor.rst:339
msgid "Called from an Object"
msgstr ""

#: ../../howto/descriptor.rst:339
msgid "Called from a Class"
msgstr ""

#: ../../howto/descriptor.rst:342
msgid "function"
msgstr ""

#: ../../howto/descriptor.rst:342
msgid "f(obj, \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:342 ../../howto/descriptor.rst:344
msgid "f(\\*args)"
msgstr ""

#: ../../howto/descriptor.rst:344
msgid "staticmethod"
msgstr ""

#: ../../howto/descriptor.rst:346
msgid "classmethod"
msgstr ""

#: ../../howto/descriptor.rst:346
msgid "f(type(obj), \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:346
msgid "f(klass, \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:349
msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into "
"``object.__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, "
"\"f\")``. As a result, the function becomes identically accessible from "
"either an object or a class."
msgstr ""

#: ../../howto/descriptor.rst:355
msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr ""

#: ../../howto/descriptor.rst:358
msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on "
"the data. However, there may be useful functions which are conceptually "
"related but do not depend on the data.  For instance, ``erf(x)`` is handy"
" conversion routine that comes up in statistical work but does not "
"directly depend on a particular dataset. It can be called either from an "
"object or the class:  ``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> "
".9332``."
msgstr ""

#: ../../howto/descriptor.rst:367
msgid ""
"Since staticmethods return the underlying function with no changes, the "
"example calls are unexciting::"
msgstr ""

#: ../../howto/descriptor.rst:370
msgid ""
">>> class E(object):\n"
"...     def f(x):\n"
"...         print(x)\n"
"...     f = staticmethod(f)\n"
"...\n"
">>> print(E.f(3))\n"
"3\n"
">>> print(E().f(3))\n"
"3"
msgstr ""

#: ../../howto/descriptor.rst:380
msgid ""
"Using the non-data descriptor protocol, a pure Python version of "
":func:`staticmethod` would look like this::"
msgstr ""

#: ../../howto/descriptor.rst:383
msgid ""
"class StaticMethod(object):\n"
"    \"Emulate PyStaticMethod_Type() in Objects/funcobject.c\"\n"
"\n"
"    def __init__(self, f):\n"
"        self.f = f\n"
"\n"
"    def __get__(self, obj, objtype=None):\n"
"        return self.f"
msgstr ""

#: ../../howto/descriptor.rst:392
msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class::"
msgstr ""

#: ../../howto/descriptor.rst:396
msgid ""
">>> class E(object):\n"
"...     def f(klass, x):\n"
"...         return klass.__name__, x\n"
"...     f = classmethod(f)\n"
"...\n"
">>> print(E.f(3))\n"
"('E', 3)\n"
">>> print(E().f(3))\n"
"('E', 3)"
msgstr ""

#: ../../howto/descriptor.rst:407
msgid ""
"This behavior is useful whenever the function only needs to have a class "
"reference and does not care about any underlying data.  One use for "
"classmethods is to create alternate class constructors.  In Python 2.3, "
"the classmethod :func:`dict.fromkeys` creates a new dictionary from a "
"list of keys.  The pure Python equivalent is::"
msgstr ""

#: ../../howto/descriptor.rst:413
msgid ""
"class Dict(object):\n"
"    . . .\n"
"    def fromkeys(klass, iterable, value=None):\n"
"        \"Emulate dict_fromkeys() in Objects/dictobject.c\"\n"
"        d = klass()\n"
"        for key in iterable:\n"
"            d[key] = value\n"
"        return d\n"
"    fromkeys = classmethod(fromkeys)"
msgstr ""

#: ../../howto/descriptor.rst:423
msgid "Now a new dictionary of unique keys can be constructed like this::"
msgstr ""

#: ../../howto/descriptor.rst:425
msgid ""
">>> Dict.fromkeys('abracadabra')\n"
"{'a': None, 'r': None, 'b': None, 'c': None, 'd': None}"
msgstr ""

#: ../../howto/descriptor.rst:428
msgid ""
"Using the non-data descriptor protocol, a pure Python version of "
":func:`classmethod` would look like this::"
msgstr ""

#: ../../howto/descriptor.rst:431
msgid ""
"class ClassMethod(object):\n"
"    \"Emulate PyClassMethod_Type() in Objects/funcobject.c\"\n"
"\n"
"    def __init__(self, f):\n"
"        self.f = f\n"
"\n"
"    def __get__(self, obj, klass=None):\n"
"        if klass is None:\n"
"            klass = type(obj)\n"
"        def newfunc(*args):\n"
"            return self.f(klass, *args)\n"
"        return newfunc"
msgstr ""

