# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../howto/cporting.rst:7
msgid "Porting Extension Modules to Python 3"
msgstr ""

#: ../../howto/cporting.rst
msgid "author"
msgstr ""

#: ../../howto/cporting.rst:9
msgid "Benjamin Peterson"
msgstr ""

#: ../../howto/cporting.rst:14
msgid ""
"Although changing the C-API was not one of Python 3's objectives, the "
"many Python-level changes made leaving Python 2's API intact impossible."
"  In fact, some changes such as :func:`int` and :func:`long` unification "
"are more obvious on the C level.  This document endeavors to document "
"incompatibilities and how they can be worked around."
msgstr ""

#: ../../howto/cporting.rst:23
msgid "Conditional compilation"
msgstr ""

#: ../../howto/cporting.rst:25
msgid ""
"The easiest way to compile only some code for Python 3 is to check if "
":c:macro:`PY_MAJOR_VERSION` is greater than or equal to 3. ::"
msgstr ""

#: ../../howto/cporting.rst:28
msgid ""
"#if PY_MAJOR_VERSION >= 3\n"
"#define IS_PY3K\n"
"#endif"
msgstr ""

#: ../../howto/cporting.rst:32
msgid ""
"API functions that are not present can be aliased to their equivalents "
"within conditional blocks."
msgstr ""

#: ../../howto/cporting.rst:37
msgid "Changes to Object APIs"
msgstr ""

#: ../../howto/cporting.rst:39
msgid ""
"Python 3 merged together some types with similar functions while cleanly "
"separating others."
msgstr ""

#: ../../howto/cporting.rst:44
msgid "str/unicode Unification"
msgstr ""

#: ../../howto/cporting.rst:46
msgid ""
"Python 3's :func:`str` type is equivalent to Python 2's :func:`unicode`; "
"the C functions are called ``PyUnicode_*`` for both.  The old 8-bit "
"string type has become :func:`bytes`, with C functions called "
"``PyBytes_*``.  Python 2.6 and later provide a compatibility header, "
":file:`bytesobject.h`, mapping ``PyBytes`` names to ``PyString`` ones.  "
"For best compatibility with Python 3, :c:type:`PyUnicode` should be used "
"for textual data and :c:type:`PyBytes` for binary data.  It's also "
"important to remember that :c:type:`PyBytes` and :c:type:`PyUnicode` in "
"Python 3 are not interchangeable like :c:type:`PyString` and "
":c:type:`PyUnicode` are in Python 2.  The following example shows best "
"practices with regards to :c:type:`PyUnicode`, :c:type:`PyString`, and "
":c:type:`PyBytes`. ::"
msgstr ""

#: ../../howto/cporting.rst:57
msgid ""
"#include \"stdlib.h\"\n"
"#include \"Python.h\"\n"
"#include \"bytesobject.h\"\n"
"\n"
"/* text example */\n"
"static PyObject *\n"
"say_hello(PyObject *self, PyObject *args) {\n"
"    PyObject *name, *result;\n"
"\n"
"    if (!PyArg_ParseTuple(args, \"U:say_hello\", &name))\n"
"        return NULL;\n"
"\n"
"    result = PyUnicode_FromFormat(\"Hello, %S!\", name);\n"
"    return result;\n"
"}\n"
"\n"
"/* just a forward */\n"
"static char * do_encode(PyObject *);\n"
"\n"
"/* bytes example */\n"
"static PyObject *\n"
"encode_object(PyObject *self, PyObject *args) {\n"
"    char *encoded;\n"
"    PyObject *result, *myobj;\n"
"\n"
"    if (!PyArg_ParseTuple(args, \"O:encode_object\", &myobj))\n"
"        return NULL;\n"
"\n"
"    encoded = do_encode(myobj);\n"
"    if (encoded == NULL)\n"
"        return NULL;\n"
"    result = PyBytes_FromString(encoded);\n"
"    free(encoded);\n"
"    return result;\n"
"}"
msgstr ""

#: ../../howto/cporting.rst:95
msgid "long/int Unification"
msgstr ""

#: ../../howto/cporting.rst:97
msgid ""
"Python 3 has only one integer type, :func:`int`.  But it actually "
"corresponds to Python 2's :func:`long` typeâ€”the :func:`int` type used in "
"Python 2 was removed.  In the C-API, ``PyInt_*`` functions are replaced "
"by their ``PyLong_*`` equivalents."
msgstr ""

#: ../../howto/cporting.rst:104
msgid "Module initialization and state"
msgstr ""

#: ../../howto/cporting.rst:106
msgid ""
"Python 3 has a revamped extension module initialization system.  (See "
":pep:`3121`.)  Instead of storing module state in globals, they should be"
" stored in an interpreter specific structure.  Creating modules that act "
"correctly in both Python 2 and Python 3 is tricky.  The following simple "
"example demonstrates how. ::"
msgstr ""

#: ../../howto/cporting.rst:112
msgid ""
"#include \"Python.h\"\n"
"\n"
"struct module_state {\n"
"    PyObject *error;\n"
"};\n"
"\n"
"#if PY_MAJOR_VERSION >= 3\n"
"#define GETSTATE(m) ((struct module_state*)PyModule_GetState(m))\n"
"#else\n"
"#define GETSTATE(m) (&_state)\n"
"static struct module_state _state;\n"
"#endif\n"
"\n"
"static PyObject *\n"
"error_out(PyObject *m) {\n"
"    struct module_state *st = GETSTATE(m);\n"
"    PyErr_SetString(st->error, \"something bad happened\");\n"
"    return NULL;\n"
"}\n"
"\n"
"static PyMethodDef myextension_methods[] = {\n"
"    {\"error_out\", (PyCFunction)error_out, METH_NOARGS, NULL},\n"
"    {NULL, NULL}\n"
"};\n"
"\n"
"#if PY_MAJOR_VERSION >= 3\n"
"\n"
"static int myextension_traverse(PyObject *m, visitproc visit, void *arg) "
"{\n"
"    Py_VISIT(GETSTATE(m)->error);\n"
"    return 0;\n"
"}\n"
"\n"
"static int myextension_clear(PyObject *m) {\n"
"    Py_CLEAR(GETSTATE(m)->error);\n"
"    return 0;\n"
"}\n"
"\n"
"\n"
"static struct PyModuleDef moduledef = {\n"
"        PyModuleDef_HEAD_INIT,\n"
"        \"myextension\",\n"
"        NULL,\n"
"        sizeof(struct module_state),\n"
"        myextension_methods,\n"
"        NULL,\n"
"        myextension_traverse,\n"
"        myextension_clear,\n"
"        NULL\n"
"};\n"
"\n"
"#define INITERROR return NULL\n"
"\n"
"PyMODINIT_FUNC\n"
"PyInit_myextension(void)\n"
"\n"
"#else\n"
"#define INITERROR return\n"
"\n"
"void\n"
"initmyextension(void)\n"
"#endif\n"
"{\n"
"#if PY_MAJOR_VERSION >= 3\n"
"    PyObject *module = PyModule_Create(&moduledef);\n"
"#else\n"
"    PyObject *module = Py_InitModule(\"myextension\", "
"myextension_methods);\n"
"#endif\n"
"\n"
"    if (module == NULL)\n"
"        INITERROR;\n"
"    struct module_state *st = GETSTATE(module);\n"
"\n"
"    st->error = PyErr_NewException(\"myextension.Error\", NULL, NULL);\n"
"    if (st->error == NULL) {\n"
"        Py_DECREF(module);\n"
"        INITERROR;\n"
"    }\n"
"\n"
"#if PY_MAJOR_VERSION >= 3\n"
"    return module;\n"
"#endif\n"
"}"
msgstr ""

#: ../../howto/cporting.rst:197
msgid "CObject replaced with Capsule"
msgstr ""

#: ../../howto/cporting.rst:199
msgid ""
"The :c:type:`Capsule` object was introduced in Python 3.1 and 2.7 to "
"replace :c:type:`CObject`.  CObjects were useful, but the "
":c:type:`CObject` API was problematic: it didn't permit distinguishing "
"between valid CObjects, which allowed mismatched CObjects to crash the "
"interpreter, and some of its APIs relied on undefined behavior in C. (For"
" further reading on the rationale behind Capsules, please see "
":issue:`5630`.)"
msgstr ""

#: ../../howto/cporting.rst:206
msgid ""
"If you're currently using CObjects, and you want to migrate to 3.1 or "
"newer, you'll need to switch to Capsules. :c:type:`CObject` was "
"deprecated in 3.1 and 2.7 and completely removed in Python 3.2.  If you "
"only support 2.7, or 3.1 and above, you can simply switch to "
":c:type:`Capsule`.  If you need to support Python 3.0, or versions of "
"Python earlier than 2.7, you'll have to support both CObjects and "
"Capsules. (Note that Python 3.0 is no longer supported, and it is not "
"recommended for production use.)"
msgstr ""

#: ../../howto/cporting.rst:216
msgid ""
"The following example header file :file:`capsulethunk.h` may solve the "
"problem for you.  Simply write your code against the :c:type:`Capsule` "
"API and include this header file after :file:`Python.h`.  Your code will "
"automatically use Capsules in versions of Python with Capsules, and "
"switch to CObjects when Capsules are unavailable."
msgstr ""

#: ../../howto/cporting.rst:223
msgid ""
":file:`capsulethunk.h` simulates Capsules using CObjects.  However, "
":c:type:`CObject` provides no place to store the capsule's \"name\".  As "
"a result the simulated :c:type:`Capsule` objects created by "
":file:`capsulethunk.h` behave slightly differently from real Capsules.  "
"Specifically:"
msgstr ""

#: ../../howto/cporting.rst:228
msgid "The name parameter passed in to :c:func:`PyCapsule_New` is ignored."
msgstr ""

#: ../../howto/cporting.rst:230
msgid ""
"The name parameter passed in to :c:func:`PyCapsule_IsValid` and "
":c:func:`PyCapsule_GetPointer` is ignored, and no error checking of the "
"name is performed."
msgstr ""

#: ../../howto/cporting.rst:234
msgid ":c:func:`PyCapsule_GetName` always returns NULL."
msgstr ""

#: ../../howto/cporting.rst:236
msgid ""
":c:func:`PyCapsule_SetName` always raises an exception and returns "
"failure.  (Since there's no way to store a name in a CObject, noisy "
"failure of :c:func:`PyCapsule_SetName` was deemed preferable to silent "
"failure here.  If this is inconvenient, feel free to modify your local "
"copy as you see fit.)"
msgstr ""

#: ../../howto/cporting.rst:243
msgid ""
"You can find :file:`capsulethunk.h` in the Python source distribution as "
":source:`Doc/includes/capsulethunk.h`.  We also include it here for your "
"convenience:"
msgstr ""

#: ../../howto/cporting.rst:247
#, python-format
msgid ""
"#ifndef __CAPSULETHUNK_H\n"
"#define __CAPSULETHUNK_H\n"
"\n"
"#if (    (PY_VERSION_HEX <  0x02070000) \\\n"
"     || ((PY_VERSION_HEX >= 0x03000000) \\\n"
"      && (PY_VERSION_HEX <  0x03010000)) )\n"
"\n"
"#define __PyCapsule_GetField(capsule, field, default_value) \\\n"
"    ( PyCapsule_CheckExact(capsule) \\\n"
"        ? (((PyCObject *)capsule)->field) \\\n"
"        : (default_value) \\\n"
"    ) \\\n"
"\n"
"#define __PyCapsule_SetField(capsule, field, value) \\\n"
"    ( PyCapsule_CheckExact(capsule) \\\n"
"        ? (((PyCObject *)capsule)->field = value), 1 \\\n"
"        : 0 \\\n"
"    ) \\\n"
"\n"
"\n"
"#define PyCapsule_Type PyCObject_Type\n"
"\n"
"#define PyCapsule_CheckExact(capsule) (PyCObject_Check(capsule))\n"
"#define PyCapsule_IsValid(capsule, name) (PyCObject_Check(capsule))\n"
"\n"
"\n"
"#define PyCapsule_New(pointer, name, destructor) \\\n"
"    (PyCObject_FromVoidPtr(pointer, destructor))\n"
"\n"
"\n"
"#define PyCapsule_GetPointer(capsule, name) \\\n"
"    (PyCObject_AsVoidPtr(capsule))\n"
"\n"
"/* Don't call PyCObject_SetPointer here, it fails if there's a destructor"
" */\n"
"#define PyCapsule_SetPointer(capsule, pointer) \\\n"
"    __PyCapsule_SetField(capsule, cobject, pointer)\n"
"\n"
"\n"
"#define PyCapsule_GetDestructor(capsule) \\\n"
"    __PyCapsule_GetField(capsule, destructor)\n"
"\n"
"#define PyCapsule_SetDestructor(capsule, dtor) \\\n"
"    __PyCapsule_SetField(capsule, destructor, dtor)\n"
"\n"
"\n"
"/*\n"
" * Sorry, there's simply no place\n"
" * to store a Capsule \"name\" in a CObject.\n"
" */\n"
"#define PyCapsule_GetName(capsule) NULL\n"
"\n"
"static int\n"
"PyCapsule_SetName(PyObject *capsule, const char *unused)\n"
"{\n"
"    unused = unused;\n"
"    PyErr_SetString(PyExc_NotImplementedError,\n"
"        \"can't use PyCapsule_SetName with CObjects\");\n"
"    return 1;\n"
"}\n"
"\n"
"\n"
"\n"
"#define PyCapsule_GetContext(capsule) \\\n"
"    __PyCapsule_GetField(capsule, descr)\n"
"\n"
"#define PyCapsule_SetContext(capsule, context) \\\n"
"    __PyCapsule_SetField(capsule, descr, context)\n"
"\n"
"\n"
"static void *\n"
"PyCapsule_Import(const char *name, int no_block)\n"
"{\n"
"    PyObject *object = NULL;\n"
"    void *return_value = NULL;\n"
"    char *trace;\n"
"    size_t name_length = (strlen(name) + 1) * sizeof(char);\n"
"    char *name_dup = (char *)PyMem_MALLOC(name_length);\n"
"\n"
"    if (!name_dup) {\n"
"        return NULL;\n"
"    }\n"
"\n"
"    memcpy(name_dup, name, name_length);\n"
"\n"
"    trace = name_dup;\n"
"    while (trace) {\n"
"        char *dot = strchr(trace, '.');\n"
"        if (dot) {\n"
"            *dot++ = '\\0';\n"
"        }\n"
"\n"
"        if (object == NULL) {\n"
"            if (no_block) {\n"
"                object = PyImport_ImportModuleNoBlock(trace);\n"
"            } else {\n"
"                object = PyImport_ImportModule(trace);\n"
"                if (!object) {\n"
"                    PyErr_Format(PyExc_ImportError,\n"
"                        \"PyCapsule_Import could not \"\n"
"                        \"import module \\\"%s\\\"\", trace);\n"
"                }\n"
"            }\n"
"        } else {\n"
"            PyObject *object2 = PyObject_GetAttrString(object, trace);\n"
"            Py_DECREF(object);\n"
"            object = object2;\n"
"        }\n"
"        if (!object) {\n"
"            goto EXIT;\n"
"        }\n"
"\n"
"        trace = dot;\n"
"    }\n"
"\n"
"    if (PyCObject_Check(object)) {\n"
"        PyCObject *cobject = (PyCObject *)object;\n"
"        return_value = cobject->cobject;\n"
"    } else {\n"
"        PyErr_Format(PyExc_AttributeError,\n"
"            \"PyCapsule_Import \\\"%s\\\" is not valid\",\n"
"            name);\n"
"    }\n"
"\n"
"EXIT:\n"
"    Py_XDECREF(object);\n"
"    if (name_dup) {\n"
"        PyMem_FREE(name_dup);\n"
"    }\n"
"    return return_value;\n"
"}\n"
"\n"
"#endif /* #if PY_VERSION_HEX < 0x02070000 */\n"
"\n"
"#endif /* __CAPSULETHUNK_H */\n"
msgstr ""

#: ../../howto/cporting.rst:252
msgid "Other options"
msgstr ""

#: ../../howto/cporting.rst:254
msgid ""
"If you are writing a new extension module, you might consider `Cython "
"<http://cython.org/>`_.  It translates a Python-like language to C.  The "
"extension modules it creates are compatible with Python 3 and Python 2."
msgstr ""

