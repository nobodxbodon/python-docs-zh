# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ""

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr ""

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order "
"without having to sort the list after each insertion.  For long lists of "
"items with expensive comparison operations, this can be an improvement "
"over the more common approach.  The module is called :mod:`bisect` "
"because it uses a basic bisection algorithm to do its work.  The source "
"code may be most useful as a working example of the algorithm (the "
"boundary conditions are already right!)."
msgstr ""

#: ../../library/bisect.rst:21
msgid "The following functions are provided:"
msgstr ""

#: ../../library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list "
"which should be considered; by default the entire list is used.  If *x* "
"is already present in *a*, the insertion point will be before (to the "
"left of) any existing entries.  The return value is suitable for use as "
"the first parameter to ``list.insert()`` assuming that *a* is already "
"sorted."
msgstr ""

#: ../../library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves"
" so that ``all(val < x for val in a[lo:i])`` for the left side and "
"``all(val >= x for val in a[i:hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:40
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which "
"comes after (to the right of) any existing entries of *x* in *a*."
msgstr ""

#: ../../library/bisect.rst:43
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves"
" so that ``all(val <= x for val in a[lo:i])`` for the left side and "
"``all(val > x for val in a[i:hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:49
msgid ""
"Insert *x* in *a* in sorted order.  This is equivalent to "
"``a.insert(bisect.bisect_left(a, x, lo, hi), x)`` assuming that *a* is "
"already sorted.  Keep in mind that the O(log n) search is dominated by "
"the slow O(n) insertion step."
msgstr ""

#: ../../library/bisect.rst:57
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any "
"existing entries of *x*."
msgstr ""

#: ../../library/bisect.rst:62
msgid ""
"`SortedCollection recipe "
"<https://code.activestate.com/recipes/577197-sortedcollection/>`_ that "
"uses bisect to build a full-featured collection class with straight-"
"forward search methods and support for a key-function.  The keys are "
"precomputed to save unnecessary calls to the key function during "
"searches."
msgstr ""

#: ../../library/bisect.rst:70
msgid "Searching Sorted Lists"
msgstr ""

#: ../../library/bisect.rst:72
msgid ""
"The above :func:`bisect` functions are useful for finding insertion "
"points but can be tricky or awkward to use for common searching tasks. "
"The following five functions show how to transform them into the standard"
" lookups for sorted lists::"
msgstr ""

#: ../../library/bisect.rst:77
msgid ""
"def index(a, x):\n"
"    'Locate the leftmost value exactly equal to x'\n"
"    i = bisect_left(a, x)\n"
"    if i != len(a) and a[i] == x:\n"
"        return i\n"
"    raise ValueError\n"
"\n"
"def find_lt(a, x):\n"
"    'Find rightmost value less than x'\n"
"    i = bisect_left(a, x)\n"
"    if i:\n"
"        return a[i-1]\n"
"    raise ValueError\n"
"\n"
"def find_le(a, x):\n"
"    'Find rightmost value less than or equal to x'\n"
"    i = bisect_right(a, x)\n"
"    if i:\n"
"        return a[i-1]\n"
"    raise ValueError\n"
"\n"
"def find_gt(a, x):\n"
"    'Find leftmost value greater than x'\n"
"    i = bisect_right(a, x)\n"
"    if i != len(a):\n"
"        return a[i]\n"
"    raise ValueError\n"
"\n"
"def find_ge(a, x):\n"
"    'Find leftmost item greater than or equal to x'\n"
"    i = bisect_left(a, x)\n"
"    if i != len(a):\n"
"        return a[i]\n"
"    raise ValueError"
msgstr ""

#: ../../library/bisect.rst:114
msgid "Other Examples"
msgstr ""

#: ../../library/bisect.rst:118
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This"
" example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A',"
" 80 to 89 is a 'B', and so on::"
msgstr ""

#: ../../library/bisect.rst:123
msgid ""
">>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n"
"...     i = bisect(breakpoints, score)\n"
"...     return grades[i]\n"
"...\n"
">>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]\n"
"['F', 'A', 'C', 'C', 'B', 'A', 'A']"
msgstr ""

#: ../../library/bisect.rst:130
msgid ""
"Unlike the :func:`sorted` function, it does not make sense for the "
":func:`bisect` functions to have *key* or *reversed* arguments because "
"that would lead to an inefficient design (successive calls to bisect "
"functions would not \"remember\" all of the previous key lookups)."
msgstr ""

#: ../../library/bisect.rst:135
msgid ""
"Instead, it is better to search a list of precomputed keys to find the "
"index of the record in question::"
msgstr ""

#: ../../library/bisect.rst:138
msgid ""
">>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]\n"
">>> data.sort(key=lambda r: r[1])\n"
">>> keys = [r[1] for r in data]         # precomputed list of keys\n"
">>> data[bisect_left(keys, 0)]\n"
"('black', 0)\n"
">>> data[bisect_left(keys, 1)]\n"
"('blue', 1)\n"
">>> data[bisect_left(keys, 5)]\n"
"('red', 5)\n"
">>> data[bisect_left(keys, 8)]\n"
"('yellow', 8)"
msgstr ""

