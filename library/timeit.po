# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ""

#: ../../library/timeit.rst:7
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr ""

#: ../../library/timeit.rst:15
msgid ""
"This module provides a simple way to time small bits of Python code. It "
"has both a :ref:`timeit-command-line-interface` as well as a "
":ref:`callable <python-interface>` one.  It avoids a number of common "
"traps for measuring execution times. See also Tim Peters' introduction to"
" the \"Algorithms\" chapter in the *Python Cookbook*, published by "
"O'Reilly."
msgstr ""

#: ../../library/timeit.rst:23
msgid "Basic Examples"
msgstr ""

#: ../../library/timeit.rst:25
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` "
"can be used to compare three different expressions:"
msgstr ""

#: ../../library/timeit.rst:28
msgid ""
"$ python3 -m timeit '\"-\".join(str(n) for n in range(100))'\n"
"10000 loops, best of 3: 30.2 usec per loop\n"
"$ python3 -m timeit '\"-\".join([str(n) for n in range(100)])'\n"
"10000 loops, best of 3: 27.5 usec per loop\n"
"$ python3 -m timeit '\"-\".join(map(str, range(100)))'\n"
"10000 loops, best of 3: 23.2 usec per loop"
msgstr ""

#: ../../library/timeit.rst:37
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr ""

#: ../../library/timeit.rst:39
msgid ""
">>> import timeit\n"
">>> timeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000)"
"\n"
"0.3018611848820001\n"
">>> timeit.timeit('\"-\".join([str(n) for n in range(100)])', "
"number=10000)\n"
"0.2727368790656328\n"
">>> timeit.timeit('\"-\".join(map(str, range(100)))', number=10000)\n"
"0.23702679807320237"
msgstr ""

#: ../../library/timeit.rst:48
msgid ""
"Note however that :mod:`timeit` will automatically determine the number "
"of repetitions only when the command-line interface is used.  In the :ref"
":`timeit-examples` section you can find more advanced examples."
msgstr ""

#: ../../library/timeit.rst:56
msgid "Python Interface"
msgstr ""

#: ../../library/timeit.rst:58
msgid "The module defines three convenience functions and a public class:"
msgstr ""

#: ../../library/timeit.rst:63
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code "
"and *timer* function and run its :meth:`.timeit` method with *number* "
"executions. The optional *globals* argument specifies a namespace in "
"which to execute the code."
msgstr ""

#: ../../library/timeit.rst:68 ../../library/timeit.rst:79
#: ../../library/timeit.rst:113
msgid "The optional *globals* parameter was added."
msgstr ""

#: ../../library/timeit.rst:74
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code "
"and *timer* function and run its :meth:`.repeat` method with the given "
"*repeat* count and *number* executions.  The optional *globals* argument "
"specifies a namespace in which to execute the code."
msgstr ""

#: ../../library/timeit.rst:84
msgid "The default timer, which is always :func:`time.perf_counter`."
msgstr ""

#: ../../library/timeit.rst:86
msgid ":func:`time.perf_counter` is now the default timer."
msgstr ""

#: ../../library/timeit.rst:92
msgid "Class for timing execution speed of small code snippets."
msgstr ""

#: ../../library/timeit.rst:94
msgid ""
"The constructor takes a statement to be timed, an additional statement "
"used for setup, and a timer function.  Both statements default to "
"``'pass'``; the timer function is platform-dependent (see the module doc "
"string). *stmt* and *setup* may also contain multiple statements "
"separated by ``;`` or newlines, as long as they don't contain multi-line "
"string literals.  The statement will by default be executed within "
"timeit's namespace; this behavior can be controlled by passing a "
"namespace to *globals*."
msgstr ""

#: ../../library/timeit.rst:102
msgid ""
"To measure the execution time of the first statement, use the "
":meth:`.timeit` method.  The :meth:`.repeat` and :meth:`.autorange` "
"methods are convenience methods to call :meth:`.timeit` multiple times."
msgstr ""

#: ../../library/timeit.rst:106
msgid ""
"The execution time of *setup* is excluded from the overall timed "
"execution run."
msgstr ""

#: ../../library/timeit.rst:108
msgid ""
"The *stmt* and *setup* parameters can also take objects that are callable"
" without arguments.  This will embed calls to them in a timer function "
"that will then be executed by :meth:`.timeit`.  Note that the timing "
"overhead is a little larger in this case because of the extra function "
"calls."
msgstr ""

#: ../../library/timeit.rst:118
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times, measured in seconds as a float. The argument"
" is the number of times through the loop, defaulting to one million.  The"
" main statement, the setup statement and the timer function to be used "
"are passed to the constructor."
msgstr ""

#: ../../library/timeit.rst:127
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage "
"collection` during the timing.  The advantage of this approach is that it"
" makes independent timings more comparable.  This disadvantage is that GC"
" may be an important component of the performance of the function being "
"measured.  If so, GC can be re-enabled as the first statement in the "
"*setup* string.  For example::"
msgstr ""

#: ../../library/timeit.rst:139
msgid "Automatically determine how many times to call :meth:`.timeit`."
msgstr ""

#: ../../library/timeit.rst:141
msgid ""
"This is a convenience function that calls :meth:`.timeit` repeatedly so "
"that the total time >= 0.2 second, returning the eventual (number of "
"loops, time taken for that number of loops). It calls :meth:`.timeit` "
"with *number* set to successive powers of ten (10, 100, 1000, ...) up to "
"a maximum of one billion, until the time taken is at least 0.2 second, or"
" the maximum is reached."
msgstr ""

#: ../../library/timeit.rst:148
msgid ""
"If *callback* is given and is not ``None``, it will be called after each "
"trial with two arguments: ``callback(number, time_taken)``."
msgstr ""

#: ../../library/timeit.rst:156
msgid "Call :meth:`.timeit` a few times."
msgstr ""

#: ../../library/timeit.rst:158
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly,"
" returning a list of results.  The first argument specifies how many "
"times to call :meth:`.timeit`.  The second argument specifies the "
"*number* argument for :meth:`.timeit`."
msgstr ""

#: ../../library/timeit.rst:165
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can "
"run the given code snippet; higher values in the result vector are "
"typically not caused by variability in Python's speed, but by other "
"processes interfering with your timing accuracy. So the :func:`min` of "
"the result is probably the only number you should be interested in.  "
"After that, you should look at the entire vector and apply common sense "
"rather than statistics."
msgstr ""

#: ../../library/timeit.rst:178
msgid "Helper to print a traceback from the timed code."
msgstr ""

#: ../../library/timeit.rst:180
msgid "Typical use::"
msgstr ""

#: ../../library/timeit.rst:182
msgid ""
"t = Timer(...)       # outside the try/except\n"
"try:\n"
"    t.timeit(...)    # or t.repeat(...)\n"
"except Exception:\n"
"    t.print_exc()"
msgstr ""

#: ../../library/timeit.rst:188
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed.  The optional *file* argument "
"directs where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""

#: ../../library/timeit.rst:196
msgid "Command-Line Interface"
msgstr ""

#: ../../library/timeit.rst:198
msgid ""
"When called as a program from the command line, the following form is "
"used::"
msgstr ""

#: ../../library/timeit.rst:200
msgid ""
"python -m timeit [-n N] [-r N] [-u U] [-s S] [-t] [-c] [-h] [statement "
"...]"
msgstr ""

#: ../../library/timeit.rst:202
msgid "Where the following options are understood:"
msgstr ""

#: ../../library/timeit.rst:208
msgid "how many times to execute 'statement'"
msgstr ""

#: ../../library/timeit.rst:212
msgid "how many times to repeat the timer (default 3)"
msgstr ""

#: ../../library/timeit.rst:216
msgid "statement to be executed once initially (default ``pass``)"
msgstr ""

#: ../../library/timeit.rst:220
msgid ""
"measure process time, not wallclock time, using :func:`time.process_time`"
" instead of :func:`time.perf_counter`, which is the default"
msgstr ""

#: ../../library/timeit.rst:227
msgid "use :func:`time.time` (deprecated)"
msgstr ""

#: ../../library/timeit.rst:231
msgid "specify a time unit for timer output; can select usec, msec, or sec"
msgstr ""

#: ../../library/timeit.rst:237
msgid "use :func:`time.clock` (deprecated)"
msgstr ""

#: ../../library/timeit.rst:241
msgid "print raw timing results; repeat for more digits precision"
msgstr ""

#: ../../library/timeit.rst:245
msgid "print a short usage message and exit"
msgstr ""

#: ../../library/timeit.rst:247
msgid ""
"A multi-line statement may be given by specifying each line as a separate"
" statement argument; indented lines are possible by enclosing an argument"
" in quotes and using leading spaces.  Multiple :option:`-s` options are "
"treated similarly."
msgstr ""

#: ../../library/timeit.rst:252
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by"
" trying successive powers of 10 until the total time is at least 0.2 "
"seconds."
msgstr ""

#: ../../library/timeit.rst:255
msgid ""
":func:`default_timer` measurements can be affected by other programs "
"running on the same machine, so the best thing to do when accurate timing"
" is necessary is to repeat the timing a few times and use the best time."
"  The :option:`-r` option is good for this; the default of 3 repetitions "
"is probably enough in most cases.  You can use :func:`time.process_time` "
"to measure CPU time."
msgstr ""

#: ../../library/timeit.rst:263
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware "
"of it.  The baseline overhead can be measured by invoking the program "
"without arguments, and it might differ between Python versions."
msgstr ""

#: ../../library/timeit.rst:272
msgid "Examples"
msgstr ""

#: ../../library/timeit.rst:274
msgid ""
"It is possible to provide a setup statement that is executed only once at"
" the beginning:"
msgstr ""

#: ../../library/timeit.rst:276
msgid ""
"$ python -m timeit -s 'text = \"sample string\"; char = \"g\"'  'char in "
"text'\n"
"10000000 loops, best of 3: 0.0877 usec per loop\n"
"$ python -m timeit -s 'text = \"sample string\"; char = \"g\"'  "
"'text.find(char)'\n"
"1000000 loops, best of 3: 0.342 usec per loop"
msgstr ""

#: ../../library/timeit.rst:285
msgid ""
">>> import timeit\n"
">>> timeit.timeit('char in text', setup='text = \"sample string\"; char ="
" \"g\"')\n"
"0.41440500499993504\n"
">>> timeit.timeit('text.find(char)', setup='text = \"sample string\"; "
"char = \"g\"')\n"
"1.7246671520006203"
msgstr ""

#: ../../library/timeit.rst:291
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr ""

#: ../../library/timeit.rst:293
msgid ""
">>> import timeit\n"
">>> t = timeit.Timer('char in text', setup='text = \"sample string\"; "
"char = \"g\"')\n"
">>> t.timeit()\n"
"0.3955516149999312\n"
">>> t.repeat()\n"
"[0.40193588800002544, 0.3960157959998014, 0.39594301399984033]"
msgstr ""

#: ../../library/timeit.rst:301
msgid ""
"The following examples show how to time expressions that contain multiple"
" lines. Here we compare the cost of using :func:`hasattr` vs. "
":keyword:`try`/:keyword:`except` to test for missing and present object "
"attributes:"
msgstr ""

#: ../../library/timeit.rst:305
msgid ""
"$ python -m timeit 'try:' '  str.__bool__' 'except AttributeError:' '  "
"pass'\n"
"100000 loops, best of 3: 15.7 usec per loop\n"
"$ python -m timeit 'if hasattr(str, \"__bool__\"): pass'\n"
"100000 loops, best of 3: 4.26 usec per loop\n"
"\n"
"$ python -m timeit 'try:' '  int.__bool__' 'except AttributeError:' '  "
"pass'\n"
"1000000 loops, best of 3: 1.43 usec per loop\n"
"$ python -m timeit 'if hasattr(int, \"__bool__\"): pass'\n"
"100000 loops, best of 3: 2.23 usec per loop"
msgstr ""

#: ../../library/timeit.rst:319
msgid ""
">>> import timeit\n"
">>> # attribute is missing\n"
">>> s = \"\"\"\\\n"
"... try:\n"
"...     str.__bool__\n"
"... except AttributeError:\n"
"...     pass\n"
"... \"\"\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.9138244460009446\n"
">>> s = \"if hasattr(str, '__bool__'): pass\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.5829014980008651\n"
">>>\n"
">>> # attribute is present\n"
">>> s = \"\"\"\\\n"
"... try:\n"
"...     int.__bool__\n"
"... except AttributeError:\n"
"...     pass\n"
"... \"\"\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.04215312199994514\n"
">>> s = \"if hasattr(int, '__bool__'): pass\"\n"
">>> timeit.timeit(stmt=s, number=100000)\n"
"0.08588060699912603"
msgstr ""

#: ../../library/timeit.rst:347
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""

#: ../../library/timeit.rst:350
msgid ""
"def test():\n"
"    \"\"\"Stupid test function\"\"\"\n"
"    L = [i for i in range(100)]\n"
"\n"
"if __name__ == '__main__':\n"
"    import timeit\n"
"    print(timeit.timeit(\"test()\", setup=\"from __main__ import test\"))"
msgstr ""

#: ../../library/timeit.rst:358
msgid ""
"Another option is to pass :func:`globals` to the  *globals* parameter, "
"which will cause the code to be executed within your current global "
"namespace.  This can be more convenient than individually specifying "
"imports::"
msgstr ""

#: ../../library/timeit.rst:362
msgid ""
"def f(x):\n"
"    return x**2\n"
"def g(x):\n"
"    return x**4\n"
"def h(x):\n"
"    return x**8\n"
"\n"
"import timeit\n"
"print(timeit.timeit('[func(42) for func in (f,g,h)]', globals=globals()))"
msgstr ""

