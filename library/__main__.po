# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/__main__.rst:3
msgid ":mod:`__main__` --- Top-level script environment"
msgstr ""

#: ../../library/__main__.rst:10
msgid ""
"``'__main__'`` is the name of the scope in which top-level code executes."
" A module's __name__ is set equal to ``'__main__'`` when read from "
"standard input, a script, or from an interactive prompt."
msgstr ""

#: ../../library/__main__.rst:14
msgid ""
"A module can discover whether or not it is running in the main scope by "
"checking its own ``__name__``, which allows a common idiom for "
"conditionally executing code in a module when it is run as a script or "
"with ``python -m`` but not when it is imported::"
msgstr ""

#: ../../library/__main__.rst:19
msgid ""
"if __name__ == \"__main__\":\n"
"    # execute only if run as a script\n"
"    main()"
msgstr ""

#: ../../library/__main__.rst:23
msgid ""
"For a package, the same effect can be achieved by including a "
"``__main__.py`` module, the contents of which will be executed when the "
"module is run with ``-m``."
msgstr ""

