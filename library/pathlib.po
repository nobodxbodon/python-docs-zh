# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/pathlib.rst:3
msgid ":mod:`pathlib` --- Object-oriented filesystem paths"
msgstr ""

#: ../../library/pathlib.rst:10
msgid "**Source code:** :source:`Lib/pathlib.py`"
msgstr ""

#: ../../library/pathlib.rst:16
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely "
"computational operations without I/O, and :ref:`concrete paths <concrete-"
"paths>`, which inherit from pure paths but also provide I/O operations."
msgstr ""

#: ../../library/pathlib.rst:25
msgid ""
"If you've never used this module before or just aren't sure which class "
"is right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the"
" code is running on."
msgstr ""

#: ../../library/pathlib.rst:29
msgid "Pure paths are useful in some special cases; for example:"
msgstr ""

#: ../../library/pathlib.rst:31
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice "
"versa). You cannot instantiate a :class:`WindowsPath` when running on "
"Unix, but you can instantiate :class:`PureWindowsPath`."
msgstr ""

#: ../../library/pathlib.rst:34
msgid ""
"You want to make sure that your code only manipulates paths without "
"actually accessing the OS. In this case, instantiating one of the pure "
"classes may be useful since those simply don't have any OS-accessing "
"operations."
msgstr ""

#: ../../library/pathlib.rst:39
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ""

#: ../../library/pathlib.rst:42
msgid ""
"For low-level path manipulation on strings, you can also use the "
":mod:`os.path` module."
msgstr ""

#: ../../library/pathlib.rst:47
msgid "Basic use"
msgstr ""

#: ../../library/pathlib.rst:49
msgid "Importing the main class::"
msgstr ""

#: ../../library/pathlib.rst:51
msgid ">>> from pathlib import Path"
msgstr ""

#: ../../library/pathlib.rst:53
msgid "Listing subdirectories::"
msgstr ""

#: ../../library/pathlib.rst:55
msgid ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"
msgstr ""

#: ../../library/pathlib.rst:60
msgid "Listing Python source files in this directory tree::"
msgstr ""

#: ../../library/pathlib.rst:62
msgid ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:67
msgid "Navigating inside a directory tree::"
msgstr ""

#: ../../library/pathlib.rst:69
msgid ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"
msgstr ""

#: ../../library/pathlib.rst:76
msgid "Querying path properties::"
msgstr ""

#: ../../library/pathlib.rst:78
msgid ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:83
msgid "Opening a file::"
msgstr ""

#: ../../library/pathlib.rst:85
msgid ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"
msgstr ""

#: ../../library/pathlib.rst:93
msgid "Pure paths"
msgstr ""

#: ../../library/pathlib.rst:95
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which"
" we also call *flavours*:"
msgstr ""

#: ../../library/pathlib.rst:101
msgid ""
"A generic class that represents the system's path flavour (instantiating "
"it creates either a :class:`PurePosixPath` or a "
":class:`PureWindowsPath`)::"
msgstr ""

#: ../../library/pathlib.rst:104
msgid ""
">>> PurePath('setup.py')      # Running on a Unix machine\n"
"PurePosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:107
msgid ""
"Each element of *pathsegments* can be either a string representing a path"
" segment, an object implementing the :class:`os.PathLike` interface which"
" returns a string, or another path object::"
msgstr ""

#: ../../library/pathlib.rst:111
msgid ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"
msgstr ""

#: ../../library/pathlib.rst:116
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr ""

#: ../../library/pathlib.rst:118
msgid ""
">>> PurePath()\n"
"PurePosixPath('.')"
msgstr ""

#: ../../library/pathlib.rst:121
msgid ""
"When several absolute paths are given, the last is taken as an anchor "
"(mimicking :func:`os.path.join`'s behaviour)::"
msgstr ""

#: ../../library/pathlib.rst:124
msgid ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"
msgstr ""

#: ../../library/pathlib.rst:129
msgid ""
"However, in a Windows path, changing the local root doesn't discard the "
"previous drive setting::"
msgstr ""

#: ../../library/pathlib.rst:132
msgid ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:135
msgid ""
"Spurious slashes and single dots are collapsed, but double dots "
"(``'..'``) are not, since this would change the meaning of a path in the "
"face of symbolic links::"
msgstr ""

#: ../../library/pathlib.rst:139
msgid ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"
msgstr ""

#: ../../library/pathlib.rst:146
msgid ""
"(a naÃ¯ve approach would make ``PurePosixPath('foo/../bar')`` equivalent "
"to ``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link"
" to another directory)"
msgstr ""

#: ../../library/pathlib.rst:150
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""

#: ../../library/pathlib.rst:153
msgid "Added support for the :class:`os.PathLike` interface."
msgstr ""

#: ../../library/pathlib.rst:158
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows"
" filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:161
msgid ""
">>> PurePosixPath('/etc')\n"
"PurePosixPath('/etc')"
msgstr ""

#: ../../library/pathlib.rst:164 ../../library/pathlib.rst:174
#: ../../library/pathlib.rst:587 ../../library/pathlib.rst:597
#: ../../library/pathlib.rst:607
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr ""

#: ../../library/pathlib.rst:168
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:171
msgid ""
">>> PureWindowsPath('c:/Program Files/')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:176
msgid ""
"Regardless of the system you're running on, you can instantiate all of "
"these classes, since they don't provide any operation that does system "
"calls."
msgstr ""

#: ../../library/pathlib.rst:181
msgid "General properties"
msgstr ""

#: ../../library/pathlib.rst:183
msgid ""
"Paths are immutable and hashable.  Paths of a same flavour are comparable"
" and orderable.  These properties respect the flavour's case-folding "
"semantics::"
msgstr ""

#: ../../library/pathlib.rst:187
msgid ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:196
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr ""

#: ../../library/pathlib.rst:198
msgid ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and "
"'PurePosixPath'"
msgstr ""

#: ../../library/pathlib.rst:207
msgid "Operators"
msgstr ""

#: ../../library/pathlib.rst:209
msgid ""
"The slash operator helps create child paths, similarly to "
":func:`os.path.join`::"
msgstr ""

#: ../../library/pathlib.rst:211
msgid ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')"
msgstr ""

#: ../../library/pathlib.rst:220
msgid ""
"A path object can be used anywhere an object implementing "
":class:`os.PathLike` is accepted::"
msgstr ""

#: ../../library/pathlib.rst:223
msgid ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"
msgstr ""

#: ../../library/pathlib.rst:228
msgid ""
"The string representation of a path is the raw filesystem path itself (in"
" native form, e.g. with backslashes under Windows), which you can pass to"
" any function taking a file path as a string::"
msgstr ""

#: ../../library/pathlib.rst:232
msgid ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"
msgstr ""

#: ../../library/pathlib.rst:239
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path"
" as a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""

#: ../../library/pathlib.rst:242
msgid ""
">>> bytes(p)\n"
"b'/etc'"
msgstr ""

#: ../../library/pathlib.rst:246
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, "
"the unicode form is the canonical representation of filesystem paths."
msgstr ""

#: ../../library/pathlib.rst:251
msgid "Accessing individual parts"
msgstr ""

#: ../../library/pathlib.rst:253
msgid ""
"To access the individual \"parts\" (components) of a path, use the "
"following property:"
msgstr ""

#: ../../library/pathlib.rst:258
msgid "A tuple giving access to the path's various components::"
msgstr ""

#: ../../library/pathlib.rst:260
msgid ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"
msgstr ""

#: ../../library/pathlib.rst:268
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr ""

#: ../../library/pathlib.rst:272
msgid "Methods and properties"
msgstr ""

#: ../../library/pathlib.rst:274
msgid "Pure paths provide the following methods and properties:"
msgstr ""

#: ../../library/pathlib.rst:278
msgid "A string representing the drive letter or name, if any::"
msgstr ""

#: ../../library/pathlib.rst:280
msgid ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:287
msgid "UNC shares are also considered drives::"
msgstr ""

#: ../../library/pathlib.rst:289
msgid ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"
msgstr ""

#: ../../library/pathlib.rst:294
msgid "A string representing the (local or global) root, if any::"
msgstr ""

#: ../../library/pathlib.rst:296
msgid ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"
msgstr ""

#: ../../library/pathlib.rst:303
msgid "UNC shares always have a root::"
msgstr ""

#: ../../library/pathlib.rst:305
msgid ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"
msgstr ""

#: ../../library/pathlib.rst:310
msgid "The concatenation of the drive and root::"
msgstr ""

#: ../../library/pathlib.rst:312
msgid ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"
msgstr ""

#: ../../library/pathlib.rst:324
msgid ""
"An immutable sequence providing access to the logical ancestors of the "
"path::"
msgstr ""

#: ../../library/pathlib.rst:327
msgid ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"
msgstr ""

#: ../../library/pathlib.rst:338
msgid "The logical parent of the path::"
msgstr ""

#: ../../library/pathlib.rst:340
msgid ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"
msgstr ""

#: ../../library/pathlib.rst:344
msgid "You cannot go past an anchor, or empty path::"
msgstr ""

#: ../../library/pathlib.rst:346
msgid ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"
msgstr ""

#: ../../library/pathlib.rst:354
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr ""

#: ../../library/pathlib.rst:360
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is "
"recommended to first call :meth:`Path.resolve` so as to resolve symlinks "
"and eliminate `\"..\"` components."
msgstr ""

#: ../../library/pathlib.rst:367
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr ""

#: ../../library/pathlib.rst:370
msgid ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"
msgstr ""

#: ../../library/pathlib.rst:373
msgid "UNC drive names are not considered::"
msgstr ""

#: ../../library/pathlib.rst:375
msgid ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:383
msgid "The file extension of the final component, if any::"
msgstr ""

#: ../../library/pathlib.rst:385
msgid ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:395
msgid "A list of the path's file extensions::"
msgstr ""

#: ../../library/pathlib.rst:397
msgid ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"
msgstr ""

#: ../../library/pathlib.rst:407
msgid "The final path component, without its suffix::"
msgstr ""

#: ../../library/pathlib.rst:409
msgid ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"
msgstr ""

#: ../../library/pathlib.rst:419
msgid "Return a string representation of the path with forward slashes (``/``)::"
msgstr ""

#: ../../library/pathlib.rst:421
msgid ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"
msgstr ""

#: ../../library/pathlib.rst:430
msgid ""
"Represent the path as a ``file`` URI.  :exc:`ValueError` is raised if the"
" path isn't absolute."
msgstr ""

#: ../../library/pathlib.rst:443
msgid ""
"Return whether the path is absolute or not.  A path is considered "
"absolute if it has both a root and (if the flavour allows) a drive::"
msgstr ""

#: ../../library/pathlib.rst:446
msgid ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:463
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With "
":class:`PurePosixPath`, ``False`` is always returned."
msgstr ""

#: ../../library/pathlib.rst:472
msgid ""
"File system calls on reserved paths can fail mysteriously or have "
"unintended effects."
msgstr ""

#: ../../library/pathlib.rst:478
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"*other* arguments in turn::"
msgstr ""

#: ../../library/pathlib.rst:481
msgid ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:493
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True``"
" if matching is successful, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:496
msgid ""
"If *pattern* is relative, the path can be either relative or absolute, "
"and matching is done from the right::"
msgstr ""

#: ../../library/pathlib.rst:499
msgid ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:506
msgid ""
"If *pattern* is absolute, the path must be absolute, and the whole path "
"must match::"
msgstr ""

#: ../../library/pathlib.rst:509
msgid ""
">>> PurePath('/a.py').match('/*.py')\n"
"True\n"
">>> PurePath('a/b.py').match('/*.py')\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:514
msgid "As with other methods, case-sensitivity is observed::"
msgstr ""

#: ../../library/pathlib.rst:516
msgid ""
">>> PureWindowsPath('b.py').match('*.PY')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:522
msgid ""
"Compute a version of this path relative to the path represented by "
"*other*.  If it's impossible, ValueError is raised::"
msgstr ""

#: ../../library/pathlib.rst:525
msgid ""
">>> p = PurePosixPath('/etc/passwd')\n"
">>> p.relative_to('/')\n"
"PurePosixPath('etc/passwd')\n"
">>> p.relative_to('/etc')\n"
"PurePosixPath('passwd')\n"
">>> p.relative_to('/usr')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 694, in relative_to\n"
"    .format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' does not start with '/usr'"
msgstr ""

#: ../../library/pathlib.rst:540
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""

#: ../../library/pathlib.rst:543
#, python-format
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""

#: ../../library/pathlib.rst:557
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead::"
msgstr ""

#: ../../library/pathlib.rst:560
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')"
msgstr ""

#: ../../library/pathlib.rst:572
msgid "Concrete paths"
msgstr ""

#: ../../library/pathlib.rst:574
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system"
" calls on path objects.  There are three ways to instantiate concrete "
"paths:"
msgstr ""

#: ../../library/pathlib.rst:580
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of "
"the system's path flavour (instantiating it creates either a "
":class:`PosixPath` or a :class:`WindowsPath`)::"
msgstr ""

#: ../../library/pathlib.rst:584
msgid ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:591
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:594
msgid ""
">>> PosixPath('/etc')\n"
"PosixPath('/etc')"
msgstr ""

#: ../../library/pathlib.rst:601
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:604
msgid ""
">>> WindowsPath('c:/Program Files/')\n"
"WindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:609
msgid ""
"You can only instantiate the class flavour that corresponds to your "
"system (allowing system calls on non-compatible path flavours could lead "
"to bugs or failures in your application)::"
msgstr ""

#: ../../library/pathlib.rst:613
msgid ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"NotImplementedError: cannot instantiate 'WindowsPath' on your system"
msgstr ""

#: ../../library/pathlib.rst:629
msgid "Methods"
msgstr ""

#: ../../library/pathlib.rst:631
msgid ""
"Concrete paths provide the following methods in addition to pure paths "
"methods.  Many of these methods can raise an :exc:`OSError` if a system "
"call fails (for example because the path doesn't exist):"
msgstr ""

#: ../../library/pathlib.rst:637
msgid ""
"Return a new path object representing the current directory (as returned "
"by :func:`os.getcwd`)::"
msgstr ""

#: ../../library/pathlib.rst:640
msgid ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""

#: ../../library/pathlib.rst:646
msgid ""
"Return a new path object representing the user's home directory (as "
"returned by :func:`os.path.expanduser` with ``~`` construct)::"
msgstr ""

#: ../../library/pathlib.rst:649
msgid ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"
msgstr ""

#: ../../library/pathlib.rst:657
msgid ""
"Return information about this path (similarly to :func:`os.stat`). The "
"result is looked up at each call to this method."
msgstr ""

#: ../../library/pathlib.rst:669
msgid "Change the file mode and permissions, like :func:`os.chmod`::"
msgstr ""

#: ../../library/pathlib.rst:671
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"
msgstr ""

#: ../../library/pathlib.rst:681
msgid "Whether the path points to an existing file or directory::"
msgstr ""

#: ../../library/pathlib.rst:683
msgid ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:693
msgid ""
"If the path points to a symlink, :meth:`exists` returns whether the "
"symlink *points to* an existing file or directory."
msgstr ""

#: ../../library/pathlib.rst:699
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as "
"returned by :meth:`os.path.expanduser`::"
msgstr ""

#: ../../library/pathlib.rst:702
msgid ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"
msgstr ""

#: ../../library/pathlib.rst:711
msgid ""
"Glob the given *pattern* in the directory represented by this path, "
"yielding all matching files (of any kind)::"
msgstr ""

#: ../../library/pathlib.rst:714
msgid ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), "
"PosixPath('test_pathlib.py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]"
msgstr ""

#: ../../library/pathlib.rst:719
msgid ""
"The \"``**``\" pattern means \"this directory and all subdirectories, "
"recursively\".  In other words, it enables recursive globbing::"
msgstr ""

#: ../../library/pathlib.rst:722
msgid ""
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:730
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

#: ../../library/pathlib.rst:736
msgid ""
"Return the name of the group owning the file.  :exc:`KeyError` is raised "
"if the file's gid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:742
msgid ""
"Return ``True`` if the path points to a directory (or a symbolic link "
"pointing to a directory), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:745 ../../library/pathlib.rst:754
#: ../../library/pathlib.rst:771 ../../library/pathlib.rst:780
#: ../../library/pathlib.rst:789 ../../library/pathlib.rst:798
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken "
"symlink; other errors (such as permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:751
msgid ""
"Return ``True`` if the path points to a regular file (or a symbolic link "
"pointing to a regular file), ``False`` if it points to another kind of "
"file."
msgstr ""

#: ../../library/pathlib.rst:760
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` "
"otherwise."
msgstr ""

#: ../../library/pathlib.rst:762
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such "
"as permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:768
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of "
"file."
msgstr ""

#: ../../library/pathlib.rst:777
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing"
" to a FIFO), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:786
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of "
"file."
msgstr ""

#: ../../library/pathlib.rst:795
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic "
"link pointing to a character device), ``False`` if it points to another "
"kind of file."
msgstr ""

#: ../../library/pathlib.rst:804
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""

#: ../../library/pathlib.rst:807
msgid ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"
msgstr ""

#: ../../library/pathlib.rst:820
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:826
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return"
" the symbolic link's information rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:832
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process' ``umask`` value to determine the file mode and"
" access flags.  If the path already exists, :exc:`FileExistsError` is "
"raised."
msgstr ""

#: ../../library/pathlib.rst:837
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking "
"*mode* into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""

#: ../../library/pathlib.rst:841
msgid ""
"If *parents* is false (the default), a missing parent raises "
":exc:`FileNotFoundError`."
msgstr ""

#: ../../library/pathlib.rst:844
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if"
" the target directory already exists."
msgstr ""

#: ../../library/pathlib.rst:847
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` exceptions will be ignored "
"(same behavior as the POSIX ``mkdir -p`` command), but only if the last "
"path component is not an existing non-directory file."
msgstr ""

#: ../../library/pathlib.rst:851
msgid "The *exist_ok* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:857
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""

#: ../../library/pathlib.rst:860
msgid ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"
msgstr ""

#: ../../library/pathlib.rst:869
msgid ""
"Return the name of the user owning the file.  :exc:`KeyError` is raised "
"if the file's uid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:875
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr ""

#: ../../library/pathlib.rst:877 ../../library/pathlib.rst:1025
msgid ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"
msgstr ""

#: ../../library/pathlib.rst:888
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr ""

#: ../../library/pathlib.rst:890 ../../library/pathlib.rst:1041
msgid ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"
msgstr ""

#: ../../library/pathlib.rst:896
msgid "The optional parameters have the same meaning as in :func:`open`."
msgstr ""

#: ../../library/pathlib.rst:903
msgid ""
"Rename this file or directory to the given *target*.  On Unix, if "
"*target* exists and is a file, it will be replaced silently if the user "
"has permission.  *target* can be either a string or another path object::"
msgstr ""

#: ../../library/pathlib.rst:907
msgid ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
">>> target.open().read()\n"
"'some text'"
msgstr ""

#: ../../library/pathlib.rst:918
msgid ""
"Rename this file or directory to the given *target*.  If *target* points "
"to an existing file or directory, it will be unconditionally replaced."
msgstr ""

#: ../../library/pathlib.rst:924
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""

#: ../../library/pathlib.rst:927
msgid ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""

#: ../../library/pathlib.rst:933
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr ""

#: ../../library/pathlib.rst:935
msgid ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"
msgstr ""

#: ../../library/pathlib.rst:939
msgid ""
"If the path doesn't exist and *strict* is ``True``, "
":exc:`FileNotFoundError` is raised.  If *strict* is ``False``, the path "
"is resolved as far as possible and any remainder is appended without "
"checking whether it exists.  If an infinite loop is encountered along the"
" resolution path, :exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/pathlib.rst:945
msgid "The *strict* argument."
msgstr ""

#: ../../library/pathlib.rst:950
msgid ""
"This is like calling :meth:`Path.glob` with \"``**``\" added in front of "
"the given *pattern*:"
msgstr ""

#: ../../library/pathlib.rst:963
msgid "Remove this directory.  The directory must be empty."
msgstr ""

#: ../../library/pathlib.rst:968
msgid ""
"Return whether this path points to the same file as *other_path*, which "
"can be either a Path object, or a string.  The semantics are similar to "
":func:`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""

#: ../../library/pathlib.rst:972
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for "
"some reason."
msgstr ""

#: ../../library/pathlib.rst:987
msgid ""
"Make this path a symbolic link to *target*.  Under Windows, "
"*target_is_directory* must be true (default ``False``) if the link's "
"target is a directory.  Under POSIX, *target_is_directory*'s value is "
"ignored."
msgstr ""

#: ../../library/pathlib.rst:1001
msgid ""
"The order of arguments (link, target) is the reverse of "
":func:`os.symlink`'s."
msgstr ""

#: ../../library/pathlib.rst:1007
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined "
"with the process' ``umask`` value to determine the file mode and access "
"flags.  If the file already exists, the function succeeds if *exist_ok* "
"is true (and its modification time is updated to the current time), "
"otherwise :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1016
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, "
"use :func:`Path.rmdir` instead."
msgstr ""

#: ../../library/pathlib.rst:1022
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the"
" file::"
msgstr ""

#: ../../library/pathlib.rst:1031
msgid "An existing file of the same name is overwritten."
msgstr ""

#: ../../library/pathlib.rst:1038
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""

