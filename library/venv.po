# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/venv.rst:2
msgid ":mod:`venv` --- Creation of virtual environments"
msgstr ""

#: ../../library/venv.rst:12
msgid "**Source code:** :source:`Lib/venv/`"
msgstr ""

#: ../../library/venv.rst:18
msgid ""
"The :mod:`venv` module provides support for creating lightweight "
"\"virtual environments\" with their own site directories, optionally "
"isolated from system site directories.  Each virtual environment has its "
"own Python binary (allowing creation of environments with various Python "
"versions) and can have its own independent set of installed Python "
"packages in its site directories."
msgstr ""

#: ../../library/venv.rst:24
msgid "See :pep:`405` for more information about Python virtual environments."
msgstr ""

#: ../../library/venv.rst:27
msgid ""
"The ``pyvenv`` script has been deprecated as of Python 3.6 in favor of "
"using ``python3 -m venv`` to help prevent any potential confusion as to "
"which Python interpreter a virtual environment will be based on."
msgstr ""

#: ../../library/venv.rst:33
msgid "Creating virtual environments"
msgstr ""

#: ../../using/venv-create.inc:1
msgid ""
"Creation of :ref:`virtual environments <venv-def>` is done by executing "
"the command ``venv``::"
msgstr ""

#: ../../using/venv-create.inc:42
msgid "python3 -m venv /path/to/new/virtual/environment"
msgstr ""

#: ../../using/venv-create.inc:6
msgid ""
"Running this command creates the target directory (creating any parent "
"directories that don't exist already) and places a ``pyvenv.cfg`` file in"
" it with a ``home`` key pointing to the Python installation from which "
"the command was run.  It also creates a ``bin`` (or ``Scripts`` on "
"Windows) subdirectory containing a copy of the ``python`` binary (or "
"binaries, in the case of Windows).  It also creates an (initially empty) "
"``lib/pythonX.Y/site-packages`` subdirectory (on Windows, this is ``Lib"
"\\site-packages``). If an existing directory is specified, it will be re-"
"used."
msgstr ""

#: ../../using/venv-create.inc:15
msgid ""
"``pyvenv`` was the recommended tool for creating virtual environments for"
" Python 3.3 and 3.4, and is `deprecated in Python 3.6 "
"<https://docs.python.org/dev/whatsnew/3.6.html#deprecated-features>`_."
msgstr ""

#: ../../using/venv-create.inc:20
msgid "The use of ``venv`` is now recommended for creating virtual environments."
msgstr ""

#: ../../using/venv-create.inc:25
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/installing/#creating-virtual-"
"environments>`__"
msgstr ""

#: ../../using/venv-create.inc:30
msgid "On Windows, invoke the ``venv`` command as follows::"
msgstr ""

#: ../../using/venv-create.inc:70
msgid "c:\\>c:\\Python35\\python -m venv c:\\path\\to\\myenv"
msgstr ""

#: ../../using/venv-create.inc:34
msgid ""
"Alternatively, if you configured the ``PATH`` and ``PATHEXT`` variables "
"for your :ref:`Python installation <using-on-windows>`::"
msgstr ""

#: ../../using/venv-create.inc:75
msgid "c:\\>python -m venv c:\\path\\to\\myenv"
msgstr ""

#: ../../using/venv-create.inc:39
msgid "The command, if run with ``-h``, will show the available options::"
msgstr ""

#: ../../using/venv-create.inc:79
msgid ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] "
"[--clear]\n"
"            [--upgrade] [--without-pip]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"  ENV_DIR               A directory to create the environment in.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  --system-site-packages\n"
"                        Give the virtual environment access to the system"
"\n"
"                        site-packages dir.\n"
"  --symlinks            Try to use symlinks rather than copies, when "
"symlinks\n"
"                        are not the default for the platform.\n"
"  --copies              Try to use copies rather than symlinks, even when"
"\n"
"                        symlinks are the default for the platform.\n"
"  --clear               Delete the contents of the environment directory "
"if it\n"
"                        already exists, before environment creation.\n"
"  --upgrade             Upgrade the environment directory to use this "
"version\n"
"                        of Python, assuming Python has been upgraded in-"
"place.\n"
"  --without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. "
"by\n"
"sourcing an activate script in its bin directory."
msgstr ""

#: ../../using/venv-create.inc:69
msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options"
msgstr ""

#: ../../using/venv-create.inc:73
msgid ""
"In earlier versions, if the target directory already existed, an error "
"was raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""

#: ../../using/venv-create.inc:77
msgid ""
"The created ``pyvenv.cfg`` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-"
"site-packages`` option, ``false`` otherwise."
msgstr ""

#: ../../using/venv-create.inc:81
msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""

#: ../../using/venv-create.inc:84
msgid ""
"Multiple paths can be given to ``venv``, in which case an identical "
"virtual environment will be created, according to the given options, at "
"each provided path."
msgstr ""

#: ../../using/venv-create.inc:88
msgid ""
"Once a virtual environment has been created, it can be \"activated\" "
"using a script in the virtual environment's binary directory. The "
"invocation of the script is platform-specific:"
msgstr ""

#: ../../using/venv-create.inc:93
msgid "Platform"
msgstr ""

#: ../../using/venv-create.inc:93
msgid "Shell"
msgstr ""

#: ../../using/venv-create.inc:93
msgid "Command to activate virtual environment"
msgstr ""

#: ../../using/venv-create.inc:95
msgid "Posix"
msgstr ""

#: ../../using/venv-create.inc:95
msgid "bash/zsh"
msgstr ""

#: ../../using/venv-create.inc:95
msgid "$ source <venv>/bin/activate"
msgstr ""

#: ../../using/venv-create.inc:97
msgid "fish"
msgstr ""

#: ../../using/venv-create.inc:97
msgid "$ . <venv>/bin/activate.fish"
msgstr ""

#: ../../using/venv-create.inc:99
msgid "csh/tcsh"
msgstr ""

#: ../../using/venv-create.inc:99
msgid "$ source <venv>/bin/activate.csh"
msgstr ""

#: ../../using/venv-create.inc:101
msgid "Windows"
msgstr ""

#: ../../using/venv-create.inc:101
msgid "cmd.exe"
msgstr ""

#: ../../using/venv-create.inc:101
msgid "C:\\\\> <venv>\\\\Scripts\\\\activate.bat"
msgstr ""

#: ../../using/venv-create.inc:103
msgid "PowerShell"
msgstr ""

#: ../../using/venv-create.inc:103
msgid "PS C:\\\\> <venv>\\\\Scripts\\\\Activate.ps1"
msgstr ""

#: ../../using/venv-create.inc:106
msgid ""
"You don't specifically *need* to activate an environment; activation just"
" prepends the virtual environment's binary directory to your path, so "
"that \"python\" invokes the virtual environment's Python interpreter and "
"you can run installed scripts without having to use their full path. "
"However, all scripts installed in a virtual environment should be "
"runnable without activating it, and run with the virtual environment's "
"Python automatically."
msgstr ""

#: ../../using/venv-create.inc:113
msgid ""
"You can deactivate a virtual environment by typing \"deactivate\" in your"
" shell. The exact mechanism is platform-specific: for example, the Bash "
"activation script defines a \"deactivate\" function, whereas on Windows "
"there are separate scripts called ``deactivate.bat`` and "
"``Deactivate.ps1`` which are installed when the virtual environment is "
"created."
msgstr ""

#: ../../using/venv-create.inc:119
msgid "``fish`` and ``csh`` activation scripts."
msgstr ""

#: ../../library/venv.rst:40
msgid ""
"A virtual environment is a Python environment such that the Python "
"interpreter, libraries and scripts installed into it are isolated from "
"those installed in other virtual environments, and (by default) any "
"libraries installed in a \"system\" Python, i.e., one which is installed "
"as part of your operating system."
msgstr ""

#: ../../library/venv.rst:46
msgid ""
"A virtual environment is a directory tree which contains Python "
"executable files and other files which indicate that it is a virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:49
msgid ""
"Common installation tools such as ``Setuptools`` and ``pip`` work as "
"expected with virtual environments. In other words, when a virtual "
"environment is active, they install Python packages into the virtual "
"environment without needing to be told to do so explicitly."
msgstr ""

#: ../../library/venv.rst:54
msgid ""
"When a virtual environment is active (i.e., the virtual environment's "
"Python interpreter is running), the attributes :attr:`sys.prefix` and "
":attr:`sys.exec_prefix` point to the base directory of the virtual "
"environment, whereas :attr:`sys.base_prefix` and "
":attr:`sys.base_exec_prefix` point to the non-virtual environment Python "
"installation which was used to create the virtual environment. If a "
"virtual environment is not active, then :attr:`sys.prefix` is the same as"
" :attr:`sys.base_prefix` and :attr:`sys.exec_prefix` is the same as "
":attr:`sys.base_exec_prefix` (they all point to a non-virtual environment"
" Python installation)."
msgstr ""

#: ../../library/venv.rst:65
msgid ""
"When a virtual environment is active, any options that change the "
"installation path will be ignored from all distutils configuration files "
"to prevent projects being inadvertently installed outside of the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:70
msgid ""
"When working in a command shell, users can make a virtual environment "
"active by running an ``activate`` script in the virtual environment's "
"executables directory (the precise filename is shell-dependent), which "
"prepends the virtual environment's directory for executables to the "
"``PATH`` environment variable for the running shell. There should be no "
"need in other circumstances to activate a virtual environment—scripts "
"installed into virtual environments have a \"shebang\" line which points "
"to the virtual environment's Python interpreter. This means that the "
"script will run with that interpreter regardless of the value of "
"``PATH``. On Windows, \"shebang\" line processing is supported if you "
"have the Python Launcher for Windows installed (this was added to Python "
"in 3.3 - see :pep:`397` for more details). Thus, double-clicking an "
"installed script in a Windows Explorer window should run the script with "
"the correct interpreter without there needing to be any reference to its "
"virtual environment in ``PATH``."
msgstr ""

#: ../../library/venv.rst:89
msgid "API"
msgstr ""

#: ../../library/venv.rst:93
msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the "
":class:`EnvBuilder` class."
msgstr ""

#: ../../library/venv.rst:101
msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr ""

#: ../../library/venv.rst:104
msgid ""
"``system_site_packages`` -- a Boolean value indicating that the system "
"Python site-packages should be available to the environment (defaults to "
"``False``)."
msgstr ""

#: ../../library/venv.rst:107
msgid ""
"``clear`` -- a Boolean value which, if true, will delete the contents of "
"any existing target directory, before creating the environment."
msgstr ""

#: ../../library/venv.rst:110
msgid ""
"``symlinks`` -- a Boolean value indicating whether to attempt to symlink "
"the Python binary (and any necessary DLLs or other binaries, e.g. "
"``pythonw.exe``), rather than copying. Defaults to ``True`` on Linux and "
"Unix systems, but ``False`` on Windows."
msgstr ""

#: ../../library/venv.rst:115
msgid ""
"``upgrade`` -- a Boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""

#: ../../library/venv.rst:119
msgid ""
"``with_pip`` -- a Boolean value which, if true, ensures pip is installed "
"in the virtual environment. This uses :mod:`ensurepip` with the "
"``--default-pip`` option."
msgstr ""

#: ../../library/venv.rst:123
msgid ""
"``prompt`` -- a String to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would"
" be used)."
msgstr ""

#: ../../library/venv.rst:127 ../../library/venv.rst:235
msgid "Added the ``with_pip`` parameter"
msgstr ""

#: ../../library/venv.rst:130
msgid "Added the ``prompt`` parameter"
msgstr ""

#: ../../library/venv.rst:134
msgid ""
"Creators of third-party virtual environment tools will be free to use the"
" provided ``EnvBuilder`` class as a base class."
msgstr ""

#: ../../library/venv.rst:137
msgid "The returned env-builder is an object which has a method, ``create``:"
msgstr ""

#: ../../library/venv.rst:141
msgid ""
"This method takes as required argument the path (absolute or relative to "
"the current directory) of the target directory which is to contain the "
"virtual environment.  The ``create`` method will either create the "
"environment in the specified directory, or raise an appropriate "
"exception."
msgstr ""

#: ../../library/venv.rst:147
msgid ""
"The ``create`` method of the ``EnvBuilder`` class illustrates the hooks "
"available for subclass customization::"
msgstr ""

#: ../../library/venv.rst:272
msgid ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"
msgstr ""

#: ../../library/venv.rst:162
msgid ""
"Each of the methods :meth:`ensure_directories`, "
":meth:`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts`"
" and :meth:`post_setup` can be overridden."
msgstr ""

#: ../../library/venv.rst:168
msgid ""
"Creates the environment directory and all necessary directories, and "
"returns a context object.  This is just a holder for attributes (such as "
"paths), for use by the other methods. The directories are allowed to "
"exist already, as long as either ``clear`` or ``upgrade`` were specified "
"to allow operating on an existing environment directory."
msgstr ""

#: ../../library/venv.rst:176
msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr ""

#: ../../library/venv.rst:180
msgid ""
"Creates a copy of the Python executable (and, under Windows, DLLs) in the"
" environment. On a POSIX system, if a specific executable ``python3.x`` "
"was used, symlinks to ``python`` and ``python3`` will be created pointing"
" to that executable, unless files with those names already exist."
msgstr ""

#: ../../library/venv.rst:188
msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:193
msgid ""
"A placeholder method which can be overridden in third party "
"implementations to pre-install packages in the virtual environment or "
"perform other post-creation steps."
msgstr ""

#: ../../library/venv.rst:197
msgid ""
"In addition, :class:`EnvBuilder` provides this utility method that can be"
" called from :meth:`setup_scripts` or :meth:`post_setup` in subclasses to"
" assist in installing custom scripts into the virtual environment."
msgstr ""

#: ../../library/venv.rst:203
msgid ""
"*path* is the path to a directory that should contain subdirectories "
"\"common\", \"posix\", \"nt\", each containing scripts destined for the "
"bin directory in the environment.  The contents of \"common\" and the "
"directory corresponding to :data:`os.name` are copied after some text "
"replacement of placeholders:"
msgstr ""

#: ../../library/venv.rst:209
msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr ""

#: ../../library/venv.rst:212
msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path "
"segment of environment directory)."
msgstr ""

#: ../../library/venv.rst:215
msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""

#: ../../library/venv.rst:218
msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory "
"(either ``bin`` or ``Scripts``)."
msgstr ""

#: ../../library/venv.rst:221
msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the "
"environment's executable."
msgstr ""

#: ../../library/venv.rst:224
msgid ""
"The directories are allowed to exist (for when an existing environment is"
" being upgraded)."
msgstr ""

#: ../../library/venv.rst:227
msgid "There is also a module-level convenience function:"
msgstr ""

#: ../../library/venv.rst:232
msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call "
"its :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""

#: ../../library/venv.rst:239
msgid "An example of extending ``EnvBuilder``"
msgstr ""

#: ../../library/venv.rst:241
msgid ""
"The following script shows how to extend :class:`EnvBuilder` by "
"implementing a subclass which installs setuptools and pip into a created "
"virtual environment::"
msgstr ""

#: ../../library/venv.rst:366
#, python-format
msgid ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If True, setuptools and pip are not installed into the"
"\n"
"                   created virtual environment.\n"
"    :param nopip: If True, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from "
"virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are "
"obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to "
"sys.stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = "
"'https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py'\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and "
"o.endswith('.tar.gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://raw.github.com/pypa/pip/master/contrib/get-pip.py'"
"\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"def main(args=None):\n"
"    compatible = True\n"
"    if sys.version_info < (3, 3):\n"
"        compatible = False\n"
"    elif not hasattr(sys, 'base_prefix'):\n"
"        compatible = False\n"
"    if not compatible:\n"
"        raise ValueError('This script is only for use with '\n"
"                         'Python 3.3 or later')\n"
"    else:\n"
"        import argparse\n"
"\n"
"        parser = argparse.ArgumentParser(prog=__name__,\n"
"                                         description='Creates virtual "
"Python '\n"
"                                                     'environments in one"
" or '\n"
"                                                     'more target '\n"
"                                                     'directories.')\n"
"        parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                            help='A directory in which to create the\n"
"                                 'virtual environment.')\n"
"        parser.add_argument('--no-setuptools', default=False,\n"
"                            action='store_true', dest='nodist',\n"
"                            help=\"Don't install setuptools or pip in the"
" \"\n"
"                                 \"virtual environment.\")\n"
"        parser.add_argument('--no-pip', default=False,\n"
"                            action='store_true', dest='nopip',\n"
"                            help=\"Don't install pip in the virtual \"\n"
"                                 \"environment.\")\n"
"        parser.add_argument('--system-site-packages', default=False,\n"
"                            action='store_true', dest='system_site',\n"
"                            help='Give the virtual environment access to "
"the '\n"
"                                 'system site-packages dir.')\n"
"        if os.name == 'nt':\n"
"            use_symlinks = False\n"
"        else:\n"
"            use_symlinks = True\n"
"        parser.add_argument('--symlinks', default=use_symlinks,\n"
"                            action='store_true', dest='symlinks',\n"
"                            help='Try to use symlinks rather than copies,"
" '\n"
"                                 'when symlinks are not the default for '"
"\n"
"                                 'the platform.')\n"
"        parser.add_argument('--clear', default=False, "
"action='store_true',\n"
"                            dest='clear', help='Delete the contents of "
"the '\n"
"                                               'virtual environment '\n"
"                                               'directory if it already '"
"\n"
"                                               'exists, before virtual '\n"
"                                               'environment creation.')\n"
"        parser.add_argument('--upgrade', default=False, "
"action='store_true',\n"
"                            dest='upgrade', help='Upgrade the virtual '\n"
"                                                 'environment directory "
"to '\n"
"                                                 'use this version of '\n"
"                                                 'Python, assuming Python"
" '\n"
"                                                 'has been upgraded '\n"
"                                                 'in-place.')\n"
"        parser.add_argument('--verbose', default=False, "
"action='store_true',\n"
"                            dest='verbose', help='Display the output '\n"
"                                               'from the scripts which '\n"
"                                               'install setuptools and "
"pip.')\n"
"        options = parser.parse_args(args)\n"
"        if options.upgrade and options.clear:\n"
"            raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"        builder = "
"ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                       clear=options.clear,\n"
"                                       symlinks=options.symlinks,\n"
"                                       upgrade=options.upgrade,\n"
"                                       nodist=options.nodist,\n"
"                                       nopip=options.nopip,\n"
"                                       verbose=options.verbose)\n"
"        for d in options.dirs:\n"
"            builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"
msgstr ""

#: ../../library/venv.rst:460
msgid ""
"This script is also available for download `online "
"<https://gist.github.com/4673395>`_."
msgstr ""

