# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/tokenize.rst:2
msgid ":mod:`tokenize` --- Tokenizer for Python source"
msgstr ""

#: ../../library/tokenize.rst:10
msgid "**Source code:** :source:`Lib/tokenize.py`"
msgstr ""

#: ../../library/tokenize.rst:14
msgid ""
"The :mod:`tokenize` module provides a lexical scanner for Python source "
"code, implemented in Python.  The scanner in this module returns comments"
" as tokens as well, making it useful for implementing \"pretty-"
"printers,\" including colorizers for on-screen displays."
msgstr ""

#: ../../library/tokenize.rst:19
msgid ""
"To simplify token stream handling, all :ref:`operator <operators>` and "
":ref:`delimiter <delimiters>` tokens and :data:`Ellipsis` are returned "
"using the generic :data:`~token.OP` token type.  The exact type can be "
"determined by checking the ``exact_type`` property on the :term:`named "
"tuple` returned from :func:`tokenize.tokenize`."
msgstr ""

#: ../../library/tokenize.rst:26
msgid "Tokenizing Input"
msgstr ""

#: ../../library/tokenize.rst:28
msgid "The primary entry point is a :term:`generator`:"
msgstr ""

#: ../../library/tokenize.rst:32
msgid ""
"The :func:`.tokenize` generator requires one argument, *readline*, which "
"must be a callable object which provides the same interface as the "
":meth:`io.IOBase.readline` method of file objects.  Each call to the "
"function should return one line of input as bytes."
msgstr ""

#: ../../library/tokenize.rst:37
msgid ""
"The generator produces 5-tuples with these members: the token type; the "
"token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and "
"column where the token begins in the source; a 2-tuple ``(erow, ecol)`` "
"of ints specifying the row and column where the token ends in the source;"
" and the line on which the token was found. The line passed (the last "
"tuple item) is the *logical* line; continuation lines are included.  The "
"5 tuple is returned as a :term:`named tuple` with the field names: ``type"
" string start end line``."
msgstr ""

#: ../../library/tokenize.rst:46
msgid ""
"The returned :term:`named tuple` has an additional property named "
"``exact_type`` that contains the exact operator type for :data:`token.OP`"
" tokens.  For all other token types ``exact_type`` equals the named tuple"
" ``type`` field."
msgstr ""

#: ../../library/tokenize.rst:51
msgid "Added support for named tuples."
msgstr ""

#: ../../library/tokenize.rst:54
msgid "Added support for ``exact_type``."
msgstr ""

#: ../../library/tokenize.rst:57
msgid ""
":func:`.tokenize` determines the source encoding of the file by looking "
"for a UTF-8 BOM or encoding cookie, according to :pep:`263`."
msgstr ""

#: ../../library/tokenize.rst:61
msgid ""
"All constants from the :mod:`token` module are also exported from "
":mod:`tokenize`, as are three additional token type values:"
msgstr ""

#: ../../library/tokenize.rst:66
msgid "Token value used to indicate a comment."
msgstr ""

#: ../../library/tokenize.rst:71
msgid ""
"Token value used to indicate a non-terminating newline.  The NEWLINE "
"token indicates the end of a logical line of Python code; NL tokens are "
"generated when a logical line of code is continued over multiple physical"
" lines."
msgstr ""

#: ../../library/tokenize.rst:78
msgid ""
"Token value that indicates the encoding used to decode the source bytes "
"into text. The first token returned by :func:`.tokenize` will always be "
"an ENCODING token."
msgstr ""

#: ../../library/tokenize.rst:83
msgid ""
"Another function is provided to reverse the tokenization process. This is"
" useful for creating tools that tokenize a script, modify the token "
"stream, and write back the modified script."
msgstr ""

#: ../../library/tokenize.rst:90
msgid ""
"Converts tokens back into Python source code.  The *iterable* must return"
" sequences with at least two elements, the token type and the token "
"string. Any additional sequence elements are ignored."
msgstr ""

#: ../../library/tokenize.rst:94
msgid ""
"The reconstructed script is returned as a single string.  The result is "
"guaranteed to tokenize back to match the input so that the conversion is "
"lossless and round-trips are assured.  The guarantee applies only to the "
"token type and token string as the spacing between tokens (column "
"positions) may change."
msgstr ""

#: ../../library/tokenize.rst:100
msgid ""
"It returns bytes, encoded using the ENCODING token, which is the first "
"token sequence output by :func:`.tokenize`."
msgstr ""

#: ../../library/tokenize.rst:104
msgid ""
":func:`.tokenize` needs to detect the encoding of source files it "
"tokenizes. The function it uses to do this is available:"
msgstr ""

#: ../../library/tokenize.rst:109
msgid ""
"The :func:`detect_encoding` function is used to detect the encoding that "
"should be used to decode a Python source file. It requires one argument, "
"readline, in the same way as the :func:`.tokenize` generator."
msgstr ""

#: ../../library/tokenize.rst:113
msgid ""
"It will call readline a maximum of twice, and return the encoding used "
"(as a string) and a list of any lines (not decoded from bytes) it has "
"read in."
msgstr ""

#: ../../library/tokenize.rst:117
msgid ""
"It detects the encoding from the presence of a UTF-8 BOM or an encoding "
"cookie as specified in :pep:`263`. If both a BOM and a cookie are "
"present, but disagree, a SyntaxError will be raised. Note that if the BOM"
" is found, ``'utf-8-sig'`` will be returned as an encoding."
msgstr ""

#: ../../library/tokenize.rst:122
msgid ""
"If no encoding is specified, then the default of ``'utf-8'`` will be "
"returned."
msgstr ""

#: ../../library/tokenize.rst:125
msgid ""
"Use :func:`.open` to open Python source files: it uses "
":func:`detect_encoding` to detect the file encoding."
msgstr ""

#: ../../library/tokenize.rst:131
msgid ""
"Open a file in read only mode using the encoding detected by "
":func:`detect_encoding`."
msgstr ""

#: ../../library/tokenize.rst:138
msgid ""
"Raised when either a docstring or expression that may be split over "
"several lines is not completed anywhere in the file, for example::"
msgstr ""

#: ../../library/tokenize.rst:141
msgid ""
"\"\"\"Beginning of\n"
"docstring"
msgstr ""

#: ../../library/tokenize.rst:144
msgid "or::"
msgstr ""

#: ../../library/tokenize.rst:146
msgid ""
"[1,\n"
" 2,\n"
" 3"
msgstr ""

#: ../../library/tokenize.rst:150
msgid ""
"Note that unclosed single-quoted strings do not cause an error to be "
"raised. They are tokenized as ``ERRORTOKEN``, followed by the "
"tokenization of their contents."
msgstr ""

#: ../../library/tokenize.rst:158
msgid "Command-Line Usage"
msgstr ""

#: ../../library/tokenize.rst:162
msgid ""
"The :mod:`tokenize` module can be executed as a script from the command "
"line. It is as simple as:"
msgstr ""

#: ../../library/tokenize.rst:165
msgid "python -m tokenize [-e] [filename.py]"
msgstr ""

#: ../../library/tokenize.rst:169
msgid "The following options are accepted:"
msgstr ""

#: ../../library/tokenize.rst:175
msgid "show this help message and exit"
msgstr ""

#: ../../library/tokenize.rst:179
msgid "display token names using the exact type"
msgstr ""

#: ../../library/tokenize.rst:181
msgid ""
"If :file:`filename.py` is specified its contents are tokenized to stdout."
" Otherwise, tokenization is performed on stdin."
msgstr ""

#: ../../library/tokenize.rst:185
msgid "Examples"
msgstr ""

#: ../../library/tokenize.rst:187
msgid ""
"Example of a script rewriter that transforms float literals into Decimal "
"objects::"
msgstr ""

#: ../../library/tokenize.rst:190
msgid ""
"from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP\n"
"from io import BytesIO\n"
"\n"
"def decistmt(s):\n"
"    \"\"\"Substitute Decimals for floats in a string of statements.\n"
"\n"
"    >>> from decimal import Decimal\n"
"    >>> s = 'print(+21.3e-5*-.1234/81.7)'\n"
"    >>> decistmt(s)\n"
"    \"print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))\"\n"
"\n"
"    The format of the exponent is inherited from the platform C library.\n"
"    Known cases are \"e-007\" (Windows) and \"e-07\" (not Windows).  "
"Since\n"
"    we're only showing 12 digits, and the 13th isn't close to 5, the\n"
"    rest of the output should be platform-independent.\n"
"\n"
"    >>> exec(s)  #doctest: +ELLIPSIS\n"
"    -3.21716034272e-0...7\n"
"\n"
"    Output from calculations with Decimal should be identical across all\n"
"    platforms.\n"
"\n"
"    >>> exec(decistmt(s))\n"
"    -3.217160342717258261933904529E-7\n"
"    \"\"\"\n"
"    result = []\n"
"    g = tokenize(BytesIO(s.encode('utf-8')).readline)  # tokenize the "
"string\n"
"    for toknum, tokval, _, _, _ in g:\n"
"        if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens\n"
"            result.extend([\n"
"                (NAME, 'Decimal'),\n"
"                (OP, '('),\n"
"                (STRING, repr(tokval)),\n"
"                (OP, ')')\n"
"            ])\n"
"        else:\n"
"            result.append((toknum, tokval))\n"
"    return untokenize(result).decode('utf-8')"
msgstr ""

#: ../../library/tokenize.rst:229
msgid "Example of tokenizing from the command line.  The script::"
msgstr ""

#: ../../library/tokenize.rst:231
msgid ""
"def say_hello():\n"
"    print(\"Hello, World!\")\n"
"\n"
"say_hello()"
msgstr ""

#: ../../library/tokenize.rst:236
msgid ""
"will be tokenized to the following output where the first column is the "
"range of the line/column coordinates where the token is found, the second"
" column is the name of the token, and the final column is the value of "
"the token (if any)"
msgstr ""

#: ../../library/tokenize.rst:240
msgid ""
"$ python -m tokenize hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          OP             '('\n"
"1,14-1,15:          OP             ')'\n"
"1,15-1,16:          OP             ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           OP             '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          OP             ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           OP             '('\n"
"4,10-4,11:          OP             ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"
msgstr ""

#: ../../library/tokenize.rst:264
msgid "The exact token type names can be displayed using the ``-e`` option:"
msgstr ""

#: ../../library/tokenize.rst:266
msgid ""
"$ python -m tokenize -e hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          LPAR           '('\n"
"1,14-1,15:          RPAR           ')'\n"
"1,15-1,16:          COLON          ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           LPAR           '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          RPAR           ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           LPAR           '('\n"
"4,10-4,11:          RPAR           ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"
msgstr ""

