# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ""

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr ""

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal"
" concept: starting another process and being able to write to and read "
"from its controlling terminal programmatically."
msgstr ""

#: ../../library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is "
"code to do it only for Linux. (The Linux code is supposed to work on "
"other platforms, but hasn't been tested yet.)"
msgstr ""

#: ../../library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr ""

#: ../../library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. "
"Return value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the"
" *fd* is *invalid*. The parent's return value is the *pid* of the child, "
"and *fd* is a file descriptor connected to the child's controlling "
"terminal (and also to the child's standard input and output)."
msgstr ""

#: ../../library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or"
" emulation code for generic Unix systems. Return a pair of file "
"descriptors ``(master, slave)``, for the master and the slave end, "
"respectively."
msgstr ""

#: ../../library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist"
" on reading from the controlling terminal."
msgstr ""

#: ../../library/pty.rst:48
msgid ""
"The functions *master_read* and *stdin_read* should be functions which "
"read from a file descriptor. The defaults try to read 1024 bytes each "
"time they are called."
msgstr ""

#: ../../library/pty.rst:52
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the"
" child process."
msgstr ""

#: ../../library/pty.rst:57
msgid "Example"
msgstr ""

#: ../../library/pty.rst:61
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, "
"using a pseudo-terminal to record all input and output of a terminal "
"session in a \"typescript\". ::"
msgstr ""

#: ../../library/pty.rst:65
#, python-format
msgid ""
"import argparse\n"
"import os\n"
"import pty\n"
"import sys\n"
"import time\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-a', dest='append', action='store_true')\n"
"parser.add_argument('-p', dest='use_python', action='store_true')\n"
"parser.add_argument('filename', nargs='?', default='typescript')\n"
"options = parser.parse_args()\n"
"\n"
"shell = sys.executable if options.use_python else os.environ.get('SHELL',"
" 'sh')\n"
"filename = options.filename\n"
"mode = 'ab' if options.append else 'wb'\n"
"\n"
"with open(filename, mode) as script:\n"
"    def read(fd):\n"
"        data = os.read(fd, 1024)\n"
"        script.write(data)\n"
"        return data\n"
"\n"
"    print('Script started, file is', filename)\n"
"    script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"\n"
"    pty.spawn(shell, read)\n"
"\n"
"    script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"    print('Script done, file is', filename)"
msgstr ""

