# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-27 02:24-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../library/itertools.rst:2
msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ""

#: ../../library/itertools.rst:16
msgid ""
"This module implements a number of :term:`iterator` building blocks "
"inspired by constructs from APL, Haskell, and SML.  Each has been recast "
"in a form suitable for Python."
msgstr ""

#: ../../library/itertools.rst:20
msgid ""
"The module standardizes a core set of fast, memory efficient tools that "
"are useful by themselves or in combination.  Together, they form an "
"\"iterator algebra\" making it possible to construct specialized tools "
"succinctly and efficiently in pure Python."
msgstr ""

#: ../../library/itertools.rst:25
msgid ""
"For instance, SML provides a tabulation tool: ``tabulate(f)`` which "
"produces a sequence ``f(0), f(1), ...``.  The same effect can be achieved"
" in Python by combining :func:`map` and :func:`count` to form ``map(f, "
"count())``."
msgstr ""

#: ../../library/itertools.rst:29
msgid ""
"These tools and their built-in counterparts also work well with the high-"
"speed functions in the :mod:`operator` module.  For example, the "
"multiplication operator can be mapped across two vectors to form an "
"efficient dot-product: ``sum(map(operator.mul, vector1, vector2))``."
msgstr ""

#: ../../library/itertools.rst:35
msgid "**Infinite iterators:**"
msgstr ""

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Iterator"
msgstr ""

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Arguments"
msgstr ""

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Results"
msgstr ""

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
msgid "Example"
msgstr ""

#: ../../library/itertools.rst:40
msgid ":func:`count`"
msgstr ""

#: ../../library/itertools.rst:40
msgid "start, [step]"
msgstr ""

#: ../../library/itertools.rst:40
msgid "start, start+step, start+2*step, ..."
msgstr ""

#: ../../library/itertools.rst:40
msgid "``count(10) --> 10 11 12 13 14 ...``"
msgstr ""

#: ../../library/itertools.rst:41
msgid ":func:`cycle`"
msgstr ""

#: ../../library/itertools.rst:41
msgid "p"
msgstr ""

#: ../../library/itertools.rst:41
msgid "p0, p1, ... plast, p0, p1, ..."
msgstr ""

#: ../../library/itertools.rst:41
msgid "``cycle('ABCD') --> A B C D A B C D ...``"
msgstr ""

#: ../../library/itertools.rst:42
msgid ":func:`repeat`"
msgstr ""

#: ../../library/itertools.rst:42
msgid "elem [,n]"
msgstr ""

#: ../../library/itertools.rst:42
msgid "elem, elem, elem, ... endlessly or up to n times"
msgstr ""

#: ../../library/itertools.rst:42
msgid "``repeat(10, 3) --> 10 10 10``"
msgstr ""

#: ../../library/itertools.rst:45
msgid "**Iterators terminating on the shortest input sequence:**"
msgstr ""

#: ../../library/itertools.rst:50
msgid ":func:`accumulate`"
msgstr ""

#: ../../library/itertools.rst:50
msgid "p [,func]"
msgstr ""

#: ../../library/itertools.rst:50
msgid "p0, p0+p1, p0+p1+p2, ..."
msgstr ""

#: ../../library/itertools.rst:50
msgid "``accumulate([1,2,3,4,5]) --> 1 3 6 10 15``"
msgstr ""

#: ../../library/itertools.rst:51
msgid ":func:`chain`"
msgstr ""

#: ../../library/itertools.rst:51 ../../library/itertools.rst:61
msgid "p, q, ..."
msgstr ""

#: ../../library/itertools.rst:51 ../../library/itertools.rst:52
msgid "p0, p1, ... plast, q0, q1, ..."
msgstr ""

#: ../../library/itertools.rst:51
msgid "``chain('ABC', 'DEF') --> A B C D E F``"
msgstr ""

#: ../../library/itertools.rst:52
msgid ":func:`chain.from_iterable`"
msgstr ""

#: ../../library/itertools.rst:52
msgid "iterable"
msgstr ""

#: ../../library/itertools.rst:52
msgid "``chain.from_iterable(['ABC', 'DEF']) --> A B C D E F``"
msgstr ""

#: ../../library/itertools.rst:53
msgid ":func:`compress`"
msgstr ""

#: ../../library/itertools.rst:53
msgid "data, selectors"
msgstr ""

#: ../../library/itertools.rst:53
msgid "(d[0] if s[0]), (d[1] if s[1]), ..."
msgstr ""

#: ../../library/itertools.rst:53
msgid "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"
msgstr ""

#: ../../library/itertools.rst:54
msgid ":func:`dropwhile`"
msgstr ""

#: ../../library/itertools.rst:54 ../../library/itertools.rst:55
#: ../../library/itertools.rst:59
msgid "pred, seq"
msgstr ""

#: ../../library/itertools.rst:54
msgid "seq[n], seq[n+1], starting when pred fails"
msgstr ""

#: ../../library/itertools.rst:54
msgid "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"
msgstr ""

#: ../../library/itertools.rst:55
msgid ":func:`filterfalse`"
msgstr ""

#: ../../library/itertools.rst:55
msgid "elements of seq where pred(elem) is false"
msgstr ""

#: ../../library/itertools.rst:55
msgid "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"
msgstr ""

#: ../../library/itertools.rst:56
msgid ":func:`groupby`"
msgstr ""

#: ../../library/itertools.rst:56
msgid "iterable[, key]"
msgstr ""

#: ../../library/itertools.rst:56
msgid "sub-iterators grouped by value of key(v)"
msgstr ""

#: ../../library/itertools.rst:57
msgid ":func:`islice`"
msgstr ""

#: ../../library/itertools.rst:57
msgid "seq, [start,] stop [, step]"
msgstr ""

#: ../../library/itertools.rst:57
msgid "elements from seq[start:stop:step]"
msgstr ""

#: ../../library/itertools.rst:57
msgid "``islice('ABCDEFG', 2, None) --> C D E F G``"
msgstr ""

#: ../../library/itertools.rst:58
msgid ":func:`starmap`"
msgstr ""

#: ../../library/itertools.rst:58
msgid "func, seq"
msgstr ""

#: ../../library/itertools.rst:58
msgid "func(\\*seq[0]), func(\\*seq[1]), ..."
msgstr ""

#: ../../library/itertools.rst:58
msgid "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"
msgstr ""

#: ../../library/itertools.rst:59
msgid ":func:`takewhile`"
msgstr ""

#: ../../library/itertools.rst:59
msgid "seq[0], seq[1], until pred fails"
msgstr ""

#: ../../library/itertools.rst:59
msgid "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"
msgstr ""

#: ../../library/itertools.rst:60
msgid ":func:`tee`"
msgstr ""

#: ../../library/itertools.rst:60
msgid "it, n"
msgstr ""

#: ../../library/itertools.rst:60
msgid "it1, it2, ... itn  splits one iterator into n"
msgstr ""

#: ../../library/itertools.rst:61
msgid ":func:`zip_longest`"
msgstr ""

#: ../../library/itertools.rst:61
msgid "(p[0], q[0]), (p[1], q[1]), ..."
msgstr ""

#: ../../library/itertools.rst:61
msgid "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"
msgstr ""

#: ../../library/itertools.rst:64
msgid "**Combinatoric iterators:**"
msgstr ""

#: ../../library/itertools.rst:69
msgid ":func:`product`"
msgstr ""

#: ../../library/itertools.rst:69
msgid "p, q, ... [repeat=1]"
msgstr ""

#: ../../library/itertools.rst:69
msgid "cartesian product, equivalent to a nested for-loop"
msgstr ""

#: ../../library/itertools.rst:70
msgid ":func:`permutations`"
msgstr ""

#: ../../library/itertools.rst:70
msgid "p[, r]"
msgstr ""

#: ../../library/itertools.rst:70
msgid "r-length tuples, all possible orderings, no repeated elements"
msgstr ""

#: ../../library/itertools.rst:71
msgid ":func:`combinations`"
msgstr ""

#: ../../library/itertools.rst:71 ../../library/itertools.rst:72
msgid "p, r"
msgstr ""

#: ../../library/itertools.rst:71
msgid "r-length tuples, in sorted order, no repeated elements"
msgstr ""

#: ../../library/itertools.rst:72
msgid ":func:`combinations_with_replacement`"
msgstr ""

#: ../../library/itertools.rst:72
msgid "r-length tuples, in sorted order, with repeated elements"
msgstr ""

#: ../../library/itertools.rst:73
msgid "``product('ABCD', repeat=2)``"
msgstr ""

#: ../../library/itertools.rst:73
msgid "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"
msgstr ""

#: ../../library/itertools.rst:74
msgid "``permutations('ABCD', 2)``"
msgstr ""

#: ../../library/itertools.rst:74
msgid "``AB AC AD BA BC BD CA CB CD DA DB DC``"
msgstr ""

#: ../../library/itertools.rst:75
msgid "``combinations('ABCD', 2)``"
msgstr ""

#: ../../library/itertools.rst:75
msgid "``AB AC AD BC BD CD``"
msgstr ""

#: ../../library/itertools.rst:76
msgid "``combinations_with_replacement('ABCD', 2)``"
msgstr ""

#: ../../library/itertools.rst:76
msgid "``AA AB AC AD BB BC BD CC CD DD``"
msgstr ""

#: ../../library/itertools.rst:83
msgid "Itertool functions"
msgstr ""

#: ../../library/itertools.rst:85
msgid ""
"The following module functions all construct and return iterators. Some "
"provide streams of infinite length, so they should only be accessed by "
"functions or loops that truncate the stream."
msgstr ""

#: ../../library/itertools.rst:91
msgid ""
"Make an iterator that returns accumulated sums, or accumulated results of"
" other binary functions (specified via the optional *func* argument).  If"
" *func* is supplied, it should be a function of two arguments. Elements "
"of the input *iterable* may be any type that can be accepted as arguments"
" to *func*. (For example, with the default operation of addition, "
"elements may be any addable type including :class:`~decimal.Decimal` or "
":class:`~fractions.Fraction`.) If the input iterable is empty, the output"
" iterable will also be empty."
msgstr ""

#: ../../library/itertools.rst:101 ../../library/itertools.rst:193
#: ../../library/itertools.rst:242 ../../library/itertools.rst:477
#: ../../library/itertools.rst:556 ../../library/itertools.rst:609
msgid "Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:103
msgid ""
"def accumulate(iterable, func=operator.add):\n"
"    'Return running totals'\n"
"    # accumulate([1,2,3,4,5]) --> 1 3 6 10 15\n"
"    # accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120\n"
"    it = iter(iterable)\n"
"    try:\n"
"        total = next(it)\n"
"    except StopIteration:\n"
"        return\n"
"    yield total\n"
"    for element in it:\n"
"        total = func(total, element)\n"
"        yield total"
msgstr ""

#: ../../library/itertools.rst:117
msgid ""
"There are a number of uses for the *func* argument.  It can be set to "
":func:`min` for a running minimum, :func:`max` for a running maximum, or "
":func:`operator.mul` for a running product.  Amortization tables can be "
"built by accumulating interest and applying payments.  First-order "
"`recurrence relations "
"<https://en.wikipedia.org/wiki/Recurrence_relation>`_ can be modeled by "
"supplying the initial value in the iterable and using only the "
"accumulated total in *func* argument::"
msgstr ""

#: ../../library/itertools.rst:125
#, python-format
msgid ""
">>> data = [3, 4, 6, 2, 1, 9, 0, 7, 5, 8]\n"
">>> list(accumulate(data, operator.mul))     # running product\n"
"[3, 12, 72, 144, 144, 1296, 0, 0, 0, 0]\n"
">>> list(accumulate(data, max))              # running maximum\n"
"[3, 4, 6, 6, 6, 9, 9, 9, 9, 9]\n"
"\n"
"# Amortize a 5% loan of 1000 with 4 annual payments of 90\n"
">>> cashflows = [1000, -90, -90, -90, -90]\n"
">>> list(accumulate(cashflows, lambda bal, pmt: bal*1.05 + pmt))\n"
"[1000, 960.0, 918.0, 873.9000000000001, 827.5950000000001]\n"
"\n"
"# Chaotic recurrence relation https://en.wikipedia.org/wiki/Logistic_map\n"
">>> logistic_map = lambda x, _:  r * x * (1 - x)\n"
">>> r = 3.8\n"
">>> x0 = 0.4\n"
">>> inputs = repeat(x0, 36)     # only the initial value is used\n"
">>> [format(x, '.2f') for x in accumulate(inputs, logistic_map)]\n"
"['0.40', '0.91', '0.30', '0.81', '0.60', '0.92', '0.29', '0.79', '0.63',\n"
" '0.88', '0.39', '0.90', '0.33', '0.84', '0.52', '0.95', '0.18', '0.57',\n"
" '0.93', '0.25', '0.71', '0.79', '0.63', '0.88', '0.39', '0.91', '0.32',\n"
" '0.83', '0.54', '0.95', '0.20', '0.60', '0.91', '0.30', '0.80', '0.60']"
msgstr ""

#: ../../library/itertools.rst:147
msgid ""
"See :func:`functools.reduce` for a similar function that returns only the"
" final accumulated value."
msgstr ""

#: ../../library/itertools.rst:152
msgid "Added the optional *func* parameter."
msgstr ""

#: ../../library/itertools.rst:157
msgid ""
"Make an iterator that returns elements from the first iterable until it "
"is exhausted, then proceeds to the next iterable, until all of the "
"iterables are exhausted.  Used for treating consecutive sequences as a "
"single sequence. Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:162
msgid ""
"def chain(*iterables):\n"
"    # chain('ABC', 'DEF') --> A B C D E F\n"
"    for it in iterables:\n"
"        for element in it:\n"
"            yield element"
msgstr ""

#: ../../library/itertools.rst:171
msgid ""
"Alternate constructor for :func:`chain`.  Gets chained inputs from a "
"single iterable argument that is evaluated lazily.  Roughly equivalent "
"to::"
msgstr ""

#: ../../library/itertools.rst:174
msgid ""
"def from_iterable(iterables):\n"
"    # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F\n"
"    for it in iterables:\n"
"        for element in it:\n"
"            yield element"
msgstr ""

#: ../../library/itertools.rst:183
msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr ""

#: ../../library/itertools.rst:185 ../../library/itertools.rst:234
msgid ""
"Combinations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the combination tuples will be produced in sorted "
"order."
msgstr ""

#: ../../library/itertools.rst:189
msgid ""
"Elements are treated as unique based on their position, not on their "
"value.  So if the input elements are unique, there will be no repeat "
"values in each combination."
msgstr ""

#: ../../library/itertools.rst:195
msgid ""
"def combinations(iterable, r):\n"
"    # combinations('ABCD', 2) --> AB AC AD BC BD CD\n"
"    # combinations(range(4), 3) --> 012 013 023 123\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    if r > n:\n"
"        return\n"
"    indices = list(range(r))\n"
"    yield tuple(pool[i] for i in indices)\n"
"    while True:\n"
"        for i in reversed(range(r)):\n"
"            if indices[i] != i + n - r:\n"
"                break\n"
"        else:\n"
"            return\n"
"        indices[i] += 1\n"
"        for j in range(i+1, r):\n"
"            indices[j] = indices[j-1] + 1\n"
"        yield tuple(pool[i] for i in indices)"
msgstr ""

#: ../../library/itertools.rst:215
msgid ""
"The code for :func:`combinations` can be also expressed as a subsequence "
"of :func:`permutations` after filtering entries where the elements are "
"not in sorted order (according to their position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:219
msgid ""
"def combinations(iterable, r):\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    for indices in permutations(range(n), r):\n"
"        if sorted(indices) == list(indices):\n"
"            yield tuple(pool[i] for i in indices)"
msgstr ""

#: ../../library/itertools.rst:226
msgid ""
"The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n``"
" or zero when ``r > n``."
msgstr ""

#: ../../library/itertools.rst:231
msgid ""
"Return *r* length subsequences of elements from the input *iterable* "
"allowing individual elements to be repeated more than once."
msgstr ""

#: ../../library/itertools.rst:238
msgid ""
"Elements are treated as unique based on their position, not on their "
"value.  So if the input elements are unique, the generated combinations "
"will also be unique."
msgstr ""

#: ../../library/itertools.rst:244
msgid ""
"def combinations_with_replacement(iterable, r):\n"
"    # combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    if not n and r:\n"
"        return\n"
"    indices = [0] * r\n"
"    yield tuple(pool[i] for i in indices)\n"
"    while True:\n"
"        for i in reversed(range(r)):\n"
"            if indices[i] != n - 1:\n"
"                break\n"
"        else:\n"
"            return\n"
"        indices[i:] = [indices[i] + 1] * (r - i)\n"
"        yield tuple(pool[i] for i in indices)"
msgstr ""

#: ../../library/itertools.rst:261
msgid ""
"The code for :func:`combinations_with_replacement` can be also expressed "
"as a subsequence of :func:`product` after filtering entries where the "
"elements are not in sorted order (according to their position in the "
"input pool)::"
msgstr ""

#: ../../library/itertools.rst:265
msgid ""
"def combinations_with_replacement(iterable, r):\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    for indices in product(range(n), repeat=r):\n"
"        if sorted(indices) == list(indices):\n"
"            yield tuple(pool[i] for i in indices)"
msgstr ""

#: ../../library/itertools.rst:272
msgid "The number of items returned is ``(n+r-1)! / r! / (n-1)!`` when ``n > 0``."
msgstr ""

#: ../../library/itertools.rst:279
msgid ""
"Make an iterator that filters elements from *data* returning only those "
"that have a corresponding element in *selectors* that evaluates to "
"``True``. Stops when either the *data* or *selectors* iterables has been "
"exhausted. Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:284
msgid ""
"def compress(data, selectors):\n"
"    # compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F\n"
"    return (d for d, s in zip(data, selectors) if s)"
msgstr ""

#: ../../library/itertools.rst:293
msgid ""
"Make an iterator that returns evenly spaced values starting with number "
"*start*. Often used as an argument to :func:`map` to generate consecutive"
" data points. Also, used with :func:`zip` to add sequence numbers.  "
"Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:297
msgid ""
"def count(start=0, step=1):\n"
"    # count(10) --> 10 11 12 13 14 ...\n"
"    # count(2.5, 0.5) -> 2.5 3.0 3.5 ...\n"
"    n = start\n"
"    while True:\n"
"        yield n\n"
"        n += step"
msgstr ""

#: ../../library/itertools.rst:305
msgid ""
"When counting with floating point numbers, better accuracy can sometimes "
"be achieved by substituting multiplicative code such as: ``(start + step "
"* i for i in count())``."
msgstr ""

#: ../../library/itertools.rst:309
msgid "Added *step* argument and allowed non-integer arguments."
msgstr ""

#: ../../library/itertools.rst:314
msgid ""
"Make an iterator returning elements from the iterable and saving a copy "
"of each. When the iterable is exhausted, return elements from the saved "
"copy.  Repeats indefinitely.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:318
msgid ""
"def cycle(iterable):\n"
"    # cycle('ABCD') --> A B C D A B C D A B C D ...\n"
"    saved = []\n"
"    for element in iterable:\n"
"        yield element\n"
"        saved.append(element)\n"
"    while saved:\n"
"        for element in saved:\n"
"              yield element"
msgstr ""

#: ../../library/itertools.rst:328
msgid ""
"Note, this member of the toolkit may require significant auxiliary "
"storage (depending on the length of the iterable)."
msgstr ""

#: ../../library/itertools.rst:334
msgid ""
"Make an iterator that drops elements from the iterable as long as the "
"predicate is true; afterwards, returns every element.  Note, the iterator"
" does not produce *any* output until the predicate first becomes false, "
"so it may have a lengthy start-up time.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:339
msgid ""
"def dropwhile(predicate, iterable):\n"
"    # dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1\n"
"    iterable = iter(iterable)\n"
"    for x in iterable:\n"
"        if not predicate(x):\n"
"            yield x\n"
"            break\n"
"    for x in iterable:\n"
"        yield x"
msgstr ""

#: ../../library/itertools.rst:351
msgid ""
"Make an iterator that filters elements from iterable returning only those"
" for which the predicate is ``False``. If *predicate* is ``None``, return"
" the items that are false. Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:355
msgid ""
"def filterfalse(predicate, iterable):\n"
"    # filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8\n"
"    if predicate is None:\n"
"        predicate = bool\n"
"    for x in iterable:\n"
"        if not predicate(x):\n"
"            yield x"
msgstr ""

#: ../../library/itertools.rst:366
msgid ""
"Make an iterator that returns consecutive keys and groups from the "
"*iterable*. The *key* is a function computing a key value for each "
"element.  If not specified or is ``None``, *key* defaults to an identity "
"function and returns the element unchanged.  Generally, the iterable "
"needs to already be sorted on the same key function."
msgstr ""

#: ../../library/itertools.rst:372
msgid ""
"The operation of :func:`groupby` is similar to the ``uniq`` filter in "
"Unix.  It generates a break or new group every time the value of the key "
"function changes (which is why it is usually necessary to have sorted the"
" data using the same key function).  That behavior differs from SQL's "
"GROUP BY which aggregates common elements regardless of their input "
"order."
msgstr ""

#: ../../library/itertools.rst:378
msgid ""
"The returned group is itself an iterator that shares the underlying "
"iterable with :func:`groupby`.  Because the source is shared, when the "
":func:`groupby` object is advanced, the previous group is no longer "
"visible.  So, if that data is needed later, it should be stored as a "
"list::"
msgstr ""

#: ../../library/itertools.rst:383
msgid ""
"groups = []\n"
"uniquekeys = []\n"
"data = sorted(data, key=keyfunc)\n"
"for k, g in groupby(data, keyfunc):\n"
"    groups.append(list(g))      # Store group iterator as a list\n"
"    uniquekeys.append(k)"
msgstr ""

#: ../../library/itertools.rst:390
msgid ":func:`groupby` is roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:392
msgid ""
"class groupby:\n"
"    # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B\n"
"    # [list(g) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D\n"
"    def __init__(self, iterable, key=None):\n"
"        if key is None:\n"
"            key = lambda x: x\n"
"        self.keyfunc = key\n"
"        self.it = iter(iterable)\n"
"        self.tgtkey = self.currkey = self.currvalue = object()\n"
"    def __iter__(self):\n"
"        return self\n"
"    def __next__(self):\n"
"        while self.currkey == self.tgtkey:\n"
"            self.currvalue = next(self.it)    # Exit on StopIteration\n"
"            self.currkey = self.keyfunc(self.currvalue)\n"
"        self.tgtkey = self.currkey\n"
"        return (self.currkey, self._grouper(self.tgtkey))\n"
"    def _grouper(self, tgtkey):\n"
"        while self.currkey == tgtkey:\n"
"            yield self.currvalue\n"
"            try:\n"
"                self.currvalue = next(self.it)\n"
"            except StopIteration:\n"
"                return\n"
"            self.currkey = self.keyfunc(self.currvalue)"
msgstr ""

#: ../../library/itertools.rst:422
msgid ""
"Make an iterator that returns selected elements from the iterable. If "
"*start* is non-zero, then elements from the iterable are skipped until "
"start is reached. Afterward, elements are returned consecutively unless "
"*step* is set higher than one which results in items being skipped.  If "
"*stop* is ``None``, then iteration continues until the iterator is "
"exhausted, if at all; otherwise, it stops at the specified position.  "
"Unlike regular slicing, :func:`islice` does not support negative values "
"for *start*, *stop*, or *step*.  Can be used to extract related fields "
"from data where the internal structure has been flattened (for example, a"
" multi-line report may list a name field on every third line).  Roughly "
"equivalent to::"
msgstr ""

#: ../../library/itertools.rst:432
msgid ""
"def islice(iterable, *args):\n"
"    # islice('ABCDEFG', 2) --> A B\n"
"    # islice('ABCDEFG', 2, 4) --> C D\n"
"    # islice('ABCDEFG', 2, None) --> C D E F G\n"
"    # islice('ABCDEFG', 0, None, 2) --> A C E G\n"
"    s = slice(*args)\n"
"    start, stop, step = s.start or 0, s.stop or sys.maxsize, s.step or 1\n"
"    it = iter(range(start, stop, step))\n"
"    try:\n"
"        nexti = next(it)\n"
"    except StopIteration:\n"
"        # Consume *iterable* up to the *start* position.\n"
"        for i, element in zip(range(start), iterable):\n"
"            pass\n"
"        return\n"
"    try:\n"
"        for i, element in enumerate(iterable):\n"
"            if i == nexti:\n"
"                yield element\n"
"                nexti = next(it)\n"
"    except StopIteration:\n"
"        # Consume to *stop*.\n"
"        for i, element in zip(range(i + 1, stop), iterable):\n"
"            pass"
msgstr ""

#: ../../library/itertools.rst:457
msgid ""
"If *start* is ``None``, then iteration starts at zero. If *step* is "
"``None``, then the step defaults to one."
msgstr ""

#: ../../library/itertools.rst:463
msgid "Return successive *r* length permutations of elements in the *iterable*."
msgstr ""

#: ../../library/itertools.rst:465
msgid ""
"If *r* is not specified or is ``None``, then *r* defaults to the length "
"of the *iterable* and all possible full-length permutations are "
"generated."
msgstr ""

#: ../../library/itertools.rst:469
msgid ""
"Permutations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the permutation tuples will be produced in sorted "
"order."
msgstr ""

#: ../../library/itertools.rst:473
msgid ""
"Elements are treated as unique based on their position, not on their "
"value.  So if the input elements are unique, there will be no repeat "
"values in each permutation."
msgstr ""

#: ../../library/itertools.rst:479
msgid ""
"def permutations(iterable, r=None):\n"
"    # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC\n"
"    # permutations(range(3)) --> 012 021 102 120 201 210\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    r = n if r is None else r\n"
"    if r > n:\n"
"        return\n"
"    indices = list(range(n))\n"
"    cycles = list(range(n, n-r, -1))\n"
"    yield tuple(pool[i] for i in indices[:r])\n"
"    while n:\n"
"        for i in reversed(range(r)):\n"
"            cycles[i] -= 1\n"
"            if cycles[i] == 0:\n"
"                indices[i:] = indices[i+1:] + indices[i:i+1]\n"
"                cycles[i] = n - i\n"
"            else:\n"
"                j = cycles[i]\n"
"                indices[i], indices[-j] = indices[-j], indices[i]\n"
"                yield tuple(pool[i] for i in indices[:r])\n"
"                break\n"
"        else:\n"
"            return"
msgstr ""

#: ../../library/itertools.rst:504
msgid ""
"The code for :func:`permutations` can be also expressed as a subsequence "
"of :func:`product`, filtered to exclude entries with repeated elements "
"(those from the same position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:508
msgid ""
"def permutations(iterable, r=None):\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    r = n if r is None else r\n"
"    for indices in product(range(n), repeat=r):\n"
"        if len(set(indices)) == r:\n"
"            yield tuple(pool[i] for i in indices)"
msgstr ""

#: ../../library/itertools.rst:516
msgid ""
"The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or "
"zero when ``r > n``."
msgstr ""

#: ../../library/itertools.rst:521
msgid "Cartesian product of input iterables."
msgstr ""

#: ../../library/itertools.rst:523
msgid ""
"Roughly equivalent to nested for-loops in a generator expression. For "
"example, ``product(A, B)`` returns the same as ``((x,y) for x in A for y "
"in B)``."
msgstr ""

#: ../../library/itertools.rst:526
msgid ""
"The nested loops cycle like an odometer with the rightmost element "
"advancing on every iteration.  This pattern creates a lexicographic "
"ordering so that if the input's iterables are sorted, the product tuples "
"are emitted in sorted order."
msgstr ""

#: ../../library/itertools.rst:531
msgid ""
"To compute the product of an iterable with itself, specify the number of "
"repetitions with the optional *repeat* keyword argument.  For example, "
"``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""

#: ../../library/itertools.rst:535
msgid ""
"This function is roughly equivalent to the following code, except that "
"the actual implementation does not build up intermediate results in "
"memory::"
msgstr ""

#: ../../library/itertools.rst:538
msgid ""
"def product(*args, repeat=1):\n"
"    # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy\n"
"    # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    result = [[]]\n"
"    for pool in pools:\n"
"        result = [x+[y] for x in result for y in pool]\n"
"    for prod in result:\n"
"        yield tuple(prod)"
msgstr ""

#: ../../library/itertools.rst:551
msgid ""
"Make an iterator that returns *object* over and over again. Runs "
"indefinitely unless the *times* argument is specified. Used as argument "
"to :func:`map` for invariant parameters to the called function.  Also "
"used with :func:`zip` to create an invariant part of a tuple record."
msgstr ""

#: ../../library/itertools.rst:558
msgid ""
"def repeat(object, times=None):\n"
"    # repeat(10, 3) --> 10 10 10\n"
"    if times is None:\n"
"        while True:\n"
"            yield object\n"
"    else:\n"
"        for i in range(times):\n"
"            yield object"
msgstr ""

#: ../../library/itertools.rst:567
msgid ""
"A common use for *repeat* is to supply a stream of constant values to "
"*map* or *zip*::"
msgstr ""

#: ../../library/itertools.rst:570
msgid ""
">>> list(map(pow, range(10), repeat(2)))\n"
"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
msgstr ""

#: ../../library/itertools.rst:575
msgid ""
"Make an iterator that computes the function using arguments obtained from"
" the iterable.  Used instead of :func:`map` when argument parameters are "
"already grouped in tuples from a single iterable (the data has been "
"\"pre-zipped\").  The difference between :func:`map` and :func:`starmap` "
"parallels the distinction between ``function(a,b)`` and ``function(*c)``."
" Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:581
msgid ""
"def starmap(function, iterable):\n"
"    # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000\n"
"    for args in iterable:\n"
"        yield function(*args)"
msgstr ""

#: ../../library/itertools.rst:589
msgid ""
"Make an iterator that returns elements from the iterable as long as the "
"predicate is true.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:592
msgid ""
"def takewhile(predicate, iterable):\n"
"    # takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4\n"
"    for x in iterable:\n"
"        if predicate(x):\n"
"            yield x\n"
"        else:\n"
"            break"
msgstr ""

#: ../../library/itertools.rst:603
msgid "Return *n* independent iterators from a single iterable."
msgstr ""

#: ../../library/itertools.rst:605
msgid ""
"The following Python code helps explain what *tee* does (although the "
"actual implementation is more complex and uses only a single underlying "
":abbr:`FIFO (first-in, first-out)` queue)."
msgstr ""

#: ../../library/itertools.rst:611
msgid ""
"def tee(iterable, n=2):\n"
"    it = iter(iterable)\n"
"    deques = [collections.deque() for i in range(n)]\n"
"    def gen(mydeque):\n"
"        while True:\n"
"            if not mydeque:             # when the local deque is empty\n"
"                try:\n"
"                    newval = next(it)   # fetch a new value and\n"
"                except StopIteration:\n"
"                    return\n"
"                for d in deques:        # load it to all the deques\n"
"                    d.append(newval)\n"
"            yield mydeque.popleft()\n"
"    return tuple(gen(d) for d in deques)"
msgstr ""

#: ../../library/itertools.rst:626
msgid ""
"Once :func:`tee` has made a split, the original *iterable* should not be "
"used anywhere else; otherwise, the *iterable* could get advanced without "
"the tee objects being informed."
msgstr ""

#: ../../library/itertools.rst:630
msgid ""
"This itertool may require significant auxiliary storage (depending on how"
" much temporary data needs to be stored). In general, if one iterator "
"uses most or all of the data before another iterator starts, it is faster"
" to use :func:`list` instead of :func:`tee`."
msgstr ""

#: ../../library/itertools.rst:638
msgid ""
"Make an iterator that aggregates elements from each of the iterables. If "
"the iterables are of uneven length, missing values are filled-in with "
"*fillvalue*. Iteration continues until the longest iterable is exhausted."
"  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:642
msgid ""
"class ZipExhausted(Exception):\n"
"    pass\n"
"\n"
"def zip_longest(*args, **kwds):\n"
"    # zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-\n"
"    fillvalue = kwds.get('fillvalue')\n"
"    counter = len(args) - 1\n"
"    def sentinel():\n"
"        nonlocal counter\n"
"        if not counter:\n"
"            raise ZipExhausted\n"
"        counter -= 1\n"
"        yield fillvalue\n"
"    fillers = repeat(fillvalue)\n"
"    iterators = [chain(it, sentinel(), fillers) for it in args]\n"
"    try:\n"
"        while iterators:\n"
"            yield tuple(map(next, iterators))\n"
"    except ZipExhausted:\n"
"        pass"
msgstr ""

#: ../../library/itertools.rst:663
msgid ""
"If one of the iterables is potentially infinite, then the "
":func:`zip_longest` function should be wrapped with something that limits"
" the number of calls (for example :func:`islice` or :func:`takewhile`).  "
"If not specified, *fillvalue* defaults to ``None``."
msgstr ""

#: ../../library/itertools.rst:672
msgid "Itertools Recipes"
msgstr ""

#: ../../library/itertools.rst:674
msgid ""
"This section shows recipes for creating an extended toolset using the "
"existing itertools as building blocks."
msgstr ""

#: ../../library/itertools.rst:677
msgid ""
"The extended tools offer the same high performance as the underlying "
"toolset. The superior memory performance is kept by processing elements "
"one at a time rather than bringing the whole iterable into memory all at "
"once. Code volume is kept small by linking the tools together in a "
"functional style which helps eliminate temporary variables.  High speed "
"is retained by preferring \"vectorized\" building blocks over the use of "
"for-loops and :term:`generator`\\s which incur interpreter overhead."
msgstr ""

#: ../../library/itertools.rst:685
msgid ""
"def take(n, iterable):\n"
"    \"Return first n items of the iterable as a list\"\n"
"    return list(islice(iterable, n))\n"
"\n"
"def prepend(value, iterator):\n"
"    \"Prepend a single value in front of an iterator\"\n"
"    # prepend(1, [2, 3, 4]) -> 1 2 3 4\n"
"    return chain([value], iterator)\n"
"\n"
"def tabulate(function, start=0):\n"
"    \"Return function(0), function(1), ...\"\n"
"    return map(function, count(start))\n"
"\n"
"def tail(n, iterable):\n"
"    \"Return an iterator over the last n items\"\n"
"    # tail(3, 'ABCDEFG') --> E F G\n"
"    return iter(collections.deque(iterable, maxlen=n))\n"
"\n"
"def consume(iterator, n=None):\n"
"    \"Advance the iterator n-steps ahead. If n is None, consume "
"entirely.\"\n"
"    # Use functions that consume iterators at C speed.\n"
"    if n is None:\n"
"        # feed the entire iterator into a zero-length deque\n"
"        collections.deque(iterator, maxlen=0)\n"
"    else:\n"
"        # advance to the empty slice starting at position n\n"
"        next(islice(iterator, n, n), None)\n"
"\n"
"def nth(iterable, n, default=None):\n"
"    \"Returns the nth item or a default value\"\n"
"    return next(islice(iterable, n, None), default)\n"
"\n"
"def all_equal(iterable):\n"
"    \"Returns True if all the elements are equal to each other\"\n"
"    g = groupby(iterable)\n"
"    return next(g, True) and not next(g, False)\n"
"\n"
"def quantify(iterable, pred=bool):\n"
"    \"Count how many times the predicate is true\"\n"
"    return sum(map(pred, iterable))\n"
"\n"
"def padnone(iterable):\n"
"    \"\"\"Returns the sequence elements and then returns None "
"indefinitely.\n"
"\n"
"    Useful for emulating the behavior of the built-in map() function.\n"
"    \"\"\"\n"
"    return chain(iterable, repeat(None))\n"
"\n"
"def ncycles(iterable, n):\n"
"    \"Returns the sequence elements n times\"\n"
"    return chain.from_iterable(repeat(tuple(iterable), n))\n"
"\n"
"def dotproduct(vec1, vec2):\n"
"    return sum(map(operator.mul, vec1, vec2))\n"
"\n"
"def flatten(listOfLists):\n"
"    \"Flatten one level of nesting\"\n"
"    return chain.from_iterable(listOfLists)\n"
"\n"
"def repeatfunc(func, times=None, *args):\n"
"    \"\"\"Repeat calls to func with specified arguments.\n"
"\n"
"    Example:  repeatfunc(random.random)\n"
"    \"\"\"\n"
"    if times is None:\n"
"        return starmap(func, repeat(args))\n"
"    return starmap(func, repeat(args, times))\n"
"\n"
"def pairwise(iterable):\n"
"    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n"
"    a, b = tee(iterable)\n"
"    next(b, None)\n"
"    return zip(a, b)\n"
"\n"
"def grouper(iterable, n, fillvalue=None):\n"
"    \"Collect data into fixed-length chunks or blocks\"\n"
"    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n"
"    args = [iter(iterable)] * n\n"
"    return zip_longest(*args, fillvalue=fillvalue)\n"
"\n"
"def roundrobin(*iterables):\n"
"    \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\n"
"    # Recipe credited to George Sakkis\n"
"    num_active = len(iterables)\n"
"    nexts = cycle(iter(it).__next__ for it in iterables)\n"
"    while num_active:\n"
"        try:\n"
"            for next in nexts:\n"
"                yield next()\n"
"        except StopIteration:\n"
"            # Remove the iterator we just exhausted from the cycle.\n"
"            num_active -= 1\n"
"            nexts = cycle(islice(nexts, num_active))\n"
"\n"
"def partition(pred, iterable):\n"
"    'Use a predicate to partition entries into false entries and true "
"entries'\n"
"    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n"
"    t1, t2 = tee(iterable)\n"
"    return filterfalse(pred, t1), filter(pred, t2)\n"
"\n"
"def powerset(iterable):\n"
"    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\""
"\n"
"    s = list(iterable)\n"
"    return chain.from_iterable(combinations(s, r) for r in "
"range(len(s)+1))\n"
"\n"
"def unique_everseen(iterable, key=None):\n"
"    \"List unique elements, preserving order. Remember all elements ever "
"seen.\"\n"
"    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n"
"    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n"
"    seen = set()\n"
"    seen_add = seen.add\n"
"    if key is None:\n"
"        for element in filterfalse(seen.__contains__, iterable):\n"
"            seen_add(element)\n"
"            yield element\n"
"    else:\n"
"        for element in iterable:\n"
"            k = key(element)\n"
"            if k not in seen:\n"
"                seen_add(k)\n"
"                yield element\n"
"\n"
"def unique_justseen(iterable, key=None):\n"
"    \"List unique elements, preserving order. Remember only the element "
"just seen.\"\n"
"    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n"
"    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n"
"    return map(next, map(itemgetter(1), groupby(iterable, key)))\n"
"\n"
"def iter_except(func, exception, first=None):\n"
"    \"\"\" Call a function repeatedly until an exception is raised.\n"
"\n"
"    Converts a call-until-exception interface to an iterator interface.\n"
"    Like builtins.iter(func, sentinel) but uses an exception instead\n"
"    of a sentinel to end the loop.\n"
"\n"
"    Examples:\n"
"        iter_except(functools.partial(heappop, h), IndexError)   # "
"priority queue iterator\n"
"        iter_except(d.popitem, KeyError)                         # non-"
"blocking dict iterator\n"
"        iter_except(d.popleft, IndexError)                       # non-"
"blocking deque iterator\n"
"        iter_except(q.get_nowait, Queue.Empty)                   # loop "
"over a producer Queue\n"
"        iter_except(s.pop, KeyError)                             # non-"
"blocking set iterator\n"
"\n"
"    \"\"\"\n"
"    try:\n"
"        if first is not None:\n"
"            yield first()            # For database APIs needing an "
"initial cast to db.first()\n"
"        while True:\n"
"            yield func()\n"
"    except exception:\n"
"        pass\n"
"\n"
"def first_true(iterable, default=False, pred=None):\n"
"    \"\"\"Returns the first true value in the iterable.\n"
"\n"
"    If no true value is found, returns *default*\n"
"\n"
"    If *pred* is not None, returns the first item\n"
"    for which pred(item) is true.\n"
"\n"
"    \"\"\"\n"
"    # first_true([a,b,c], x) --> a or b or c or x\n"
"    # first_true([a,b], x, f) --> a if f(a) else b if f(b) else x\n"
"    return next(filter(pred, iterable), default)\n"
"\n"
"def random_product(*args, repeat=1):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(random.choice(pool) for pool in pools)\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Random selection from "
"itertools.combinations_with_replacement(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.randrange(n) for i in range(r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def nth_combination(iterable, r, index):\n"
"    'Equivalent to list(combinations(iterable, r))[index]'\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    if r < 0 or r > n:\n"
"        raise ValueError\n"
"    c = 1\n"
"    k = min(r, n-r)\n"
"    for i in range(1, k+1):\n"
"        c = c * (n - k + i) // i\n"
"    if index < 0:\n"
"        index += c\n"
"    if index < 0 or index >= c:\n"
"        raise IndexError\n"
"    result = []\n"
"    while r:\n"
"        c, n, r = c*r//n, n-1, r-1\n"
"        while index >= c:\n"
"            index -= c\n"
"            c, n = c*(n-r)//n, n-1\n"
"        result.append(pool[-1-n])\n"
"    return tuple(result)"
msgstr ""

#: ../../library/itertools.rst:899
msgid ""
"Note, many of the above recipes can be optimized by replacing global "
"lookups with local variables defined as default values.  For example, the"
" *dotproduct* recipe can be written as::"
msgstr ""

#: ../../library/itertools.rst:903
msgid ""
"def dotproduct(vec1, vec2, sum=sum, map=map, mul=operator.mul):\n"
"    return sum(map(mul, vec1, vec2))"
msgstr ""

